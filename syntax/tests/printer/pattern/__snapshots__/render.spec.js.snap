// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`alias.res 1`] = `
"let x as y = 1
let (x as y) as z = 1
let (Foo | Bar) as x = 1
"
`;

exports[`any.res 1`] = `
"let _ = 1
"
`;

exports[`array.res 1`] = `
"let [a, b, c] = 1

let [
  aaaaaaaaaaaaaaaaaaaaaaaaaa,
  bbbbbbbbbbbbbbbbbbbbbbbbbb,
  cccccccccccccccccccccccccc,
] = 1
"
`;

exports[`constant.res 1`] = `
"let 1 = 1
let \\"string\\" = 1
let 3.14 = 1

let print = (ppf, i) =>
  switch i.stamp {
  | 0 => fprintf(ppf, \\"%s!\\", i.name)
  | -1 => fprintf(ppf, \\"%s#\\", i.name)
  | 1 => fprintf(ppf, \\"%s#\\", i.name)
  | -1. => fprintf(ppf, \\"%s#\\", i.name)
  | 1. => fprintf(ppf, \\"%s#\\", i.name)
  }

let [-1, 1, 1] = x

switch science {
| (1.12, -3.13) => true
| [1.12, -3.13] => true
| list{1.12, -3.13} => true
| {x: 1.12, y: -3.13} => true
| Constructor(1.12, -2.45) => true
| #Constuctor(1.12, -2.45) => true
| -4.15 as x => true
| -4.15 | 4.15 => true
| (-3.14: float) => true
| lazy 5.678 => true
| exception 19.34 => true
| _ => false
}

<div>
  {switch state.uploadProgress {
  | None => React.null
  | Some(1.0) => React.null
  | Some(uploadProgress) =>
    <div className=Styles.fill>
      <StudioUploadProgressIndicator progress=uploadProgress />
    </div>
  }}
</div>
"
`;

exports[`constraint.js 1`] = `
"switch thing {
| Some(node: node) => ()
| Some(node: Feature.node) => ()
| list{child: node, ...rest} => ()
| list{child: node, ...rest} => ()
| (Some(_), Some(menuItem: Menu.item)) => ()
| (Some(_), Some(menuItem: Menu.item)) => ()
| SettingChanged({fullName, value, _}: Nova.Setting.t) => ()
| SettingChanged({fullName, value, _}: Nova.Setting.t) => ()
}
"
`;

exports[`construct.res 1`] = `
"let () = 1

let Constructor = 1

let Foo() = 1
let Foo() = 1

let Rgb(r, g, b) = 1

let Rgb(
  rrrrrrrrrrrrrrrrrrrrrrrrr,
  ggggggggggggggggggggggggg,
  bbbbbbbbbbbbbbbbbbbbbbbbb,
) = 1
let Units((), (), ()) = 1

switch truth {
| true => Js.log(\\"true\\")
| false => Js.log(\\"false\\")
}

switch sphere->intersect(~ray) {
| None => assert false
| Some((x, y)) => assert true
}

// huggable patterns
let Foo({
  superLongIdent: x,
  superLongIdent2: y,
  superLongIdent3: z,
  superLongIdent4: a,
}) = x
let Foo((
  superLongIdent,
  superLongIdent2,
  superLongIdent,
  superLongIdent4,
  superLongIdent5,
)) = x
let Foo([
  superLongIdent,
  superLongIdent2,
  superLongIdent,
  superLongIdent4,
  superLongIdent5,
]) = x
let Foo(list{
  superLongIdent,
  superLongIdent2,
  superLongIdent,
  superLongIdent4,
  superLongIdent5,
}) = x
"
`;

exports[`exception.res 1`] = `
"let exception Exit = 1
let exception (Exit | Quit) = 1
let exception Exit as z = 1
let exception (Exit as z) = 1
"
`;

exports[`exoticIdent.res 1`] = `
"let \\\\\\"type\\" = x

let {\\\\\\"type\\", \\\\\\"module\\"} = x
let {\\\\\\"type\\": \\\\\\"let\\", \\\\\\"module\\": \\\\\\"DangerousPattern\\"} = x
let {Foo.\\\\\\"type\\": \\\\\\"let\\", \\\\\\"module\\": \\\\\\"DangerousPattern\\"} = x
"
`;

exports[`extension.res 1`] = `
"let %extensionPoint = 1
"
`;

exports[`firstClassModules.js 1`] = `
"let module(Set) = z
let module(Set: Set.S with type elt = s) = y
let module(Set: Set.S with type elt = s and type elt2 = t) = x
let module(Set: Set.S with
  type elt = s
  and type elt2 = t
  and type elementWithSuperLongName = thisIsALongTypeOverHere
) = x
"
`;

exports[`interval.res 1`] = `
"let 'a' .. 'z' = x

let loop = (i, s) =>
  switch String.get(s, i) {
  | '0' .. '9' | '-' => loop(i + 1)
  | _ => s
  }
"
`;

exports[`lazy.res 1`] = `
"let lazy x = 1
let lazy (Foo | Bar) = 1
let lazy (x as y) = 1
"
`;

exports[`list.res 1`] = `
"let list{} = 1
let list{1} = 1
let list{1, 2} = 1
let list{1, 2, 3} = 1
let list{1, 2, ...tail} = 1

let list{
  aaaaaaaaaaaaaaaaaaaaaaaaaa,
  bbbbbbbbbbbbbbbbbbbbbbbbbb,
  cccccccccccccccccccccccccc,
} = 1
let list{
  aaaaaaaaaaaaaaaaaaaaaaaaaa,
  bbbbbbbbbbbbbbbbbbbbbbbbbb,
  cccccccccccccccccccccccccc,
  ...tail,
} = 1
"
`;

exports[`or.res 1`] = `
"let Foo | Bar = 1
let Red | Blue | Green = 1
let Red | (Blue | Green) = 1
let exception Foo | exception Bar = 1

let Red | Blue | Green = x

let Red | (Blue | Green) = x
let Red | Blue | Green = x
let Red | Blue | (Green | Purple) | Black = x
let Red | Blue | (Green | Purple | Rosa) | (Black | White) = x
let Red
| Blue
| (Green | Purple | Rosa)
| (Black | White)
| AnotherColoooooour = x
"
`;

exports[`record.res 1`] = `
"let {x} = 1
let {x, _} = 1
let {x, y} = 1
let {x, y, _} = 1
let {x: xCoord} = 1
let {x: xCoord, _} = 1
let {x: xCoord, y: yCoord} = 1
let {x: xCoord, y: yCoord, _} = 1
let {
  xxxxxxxxxxxxxxxxxxxxxxxxx,
  yyyyyyyyyyyyyyyyyyyyyyyyy,
  zzzzzzzzzzzzzzzzzzzzzzzzz,
} = 1
let {
  xxxxxxxxxxxxxxxxxxxxxxxxx,
  yyyyyyyyyyyyyyyyyyyyyyyyy,
  zzzzzzzzzzzzzzzzzzzzzzzzz,
  _,
} = 1

let {x: y} = z
let {x: x as y} = z
"
`;

exports[`tuple.res 1`] = `
"// let (a,) = 1 -> one-element tuples are not supported
let (a, b) = 1
let (
  aaaaaaaaaaaaaaaaaaaaaaaaaa,
  bbbbbbbbbbbbbbbbbbbbbbbbbb,
  cccccccccccccccccccccccccc,
) = 1
"
`;

exports[`type.res 1`] = `
"let #...shape = x
let #...\\\\\\"Shape\\" = x
let #...\\\\\\"type\\" = x
let #...\\\\\\"test 🏚\\" = x
let #...\\\\\\"Shape✅\\" = x

switch (selectedChoice, value) {
| (#...A.a, #...A.a) => true
| (#...A.b, #...A.b) => true
| (#...A.c, #...A.c) => true
| _ => false
}
"
`;

exports[`var.res 1`] = `
"let foo = 1

let superLongIdentifierLongSoooooooooooooLooooooooooooooooooooooooooooooooooooooong = 1

let list = 3
"
`;

exports[`variant.res 1`] = `
"let #shape = x
let #Shape = x
let #\\\\\\"type\\" = x
let #\\\\\\"test 🏚\\" = x
let #\\\\\\"Shape✅\\" = x

let #Shape(\\\\\\"module\\", \\\\\\"ExoticIdent\\") = x

let #\\\\\\"type\\"(\\\\\\"module\\", \\\\\\"ExoticIdent\\") = x
let #\\\\\\"Shape🎡\\"(\\\\\\"module\\", \\\\\\"ExoticIdent\\") = x

let cmp = (selectedChoice, value) =>
  switch (selectedChoice, value) {
  | (#...a, #...a) => true
  | [#...b, #...b] => true
  | list{#...b, #...b} => true
  | {x: #...c, y: #...c} => true
  | Constructor(#...a, #...a) => true
  | #Constuctor(#...a, #...a) => true
  | #...a as x => true
  | #...a | #...b => true
  | (#...a: typ) => true
  | lazy #...a => true
  | exception #...a => true
  | _ => false
  }
"
`;
