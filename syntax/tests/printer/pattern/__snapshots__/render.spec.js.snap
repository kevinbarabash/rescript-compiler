// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`alias.ns 1`] = `
"let x as y = 1
let (x as y) as z = 1
let (Foo | Bar) as x = 1
"
`;

exports[`any.ns 1`] = `
"let _ = 1
"
`;

exports[`array.ns 1`] = `
"let [a, b, c] = 1

let [
  aaaaaaaaaaaaaaaaaaaaaaaaaa,
  bbbbbbbbbbbbbbbbbbbbbbbbbb,
  cccccccccccccccccccccccccc,
] = 1
"
`;

exports[`constant.ns 1`] = `""`;

exports[`construct.ns 1`] = `""`;

exports[`exception.ns 1`] = `
"let exception Exit = 1
let exception (Exit | Quit) = 1
let exception Exit as z = 1
let exception (Exit as z) = 1
"
`;

exports[`exoticIdent.ns 1`] = `
"let \\\\\\"type\\" = x

let {\\\\\\"type\\", \\\\\\"module\\"} = x
let {\\\\\\"type\\": \\\\\\"let\\", \\\\\\"module\\": \\\\\\"DangerousPattern\\"} = x
let {Foo.\\\\\\"type\\": \\\\\\"let\\", \\\\\\"module\\": \\\\\\"DangerousPattern\\"} = x
"
`;

exports[`extension.ns 1`] = `
"let %extensionPoint = 1
"
`;

exports[`firstClassModules.js 1`] = `
"let module(Set) = z
let module(Set: Set.S with type elt = s) = y
let module(Set: Set.S with type elt = s and type elt2 = t) = x
let module(Set: Set.S with
  type elt = s
  and type elt2 = t
  and type elementWithSuperLongName = thisIsALongTypeOverHere
) = x
"
`;

exports[`interval.ns 1`] = `
"let 'a' .. 'z' = x

let loop = (i, s) =>
  switch String.get(s, i) {
  | '0' .. '9' | '-' => loop(i + 1)
  | _ => s
  }
"
`;

exports[`lazy.ns 1`] = `
"let lazy x = 1
let lazy (Foo | Bar) = 1
let lazy (x as y) = 1
"
`;

exports[`list.ns 1`] = `""`;

exports[`or.ns 1`] = `
"let Foo | Bar = 1
let Red | Blue | Green = 1
let Red | (Blue | Green) = 1
let exception Foo | exception Bar = 1

let Red | Blue | Green = x

let Red | (Blue | Green) = x
let Red | Blue | Green = x
let Red | Blue | (Green | Purple) | Black = x
let Red | Blue | (Green | Purple | Rosa) | (Black | White) = x
let Red
| Blue
| (Green | Purple | Rosa)
| (Black | White)
| AnotherColoooooour = x
"
`;

exports[`record.ns 1`] = `
"let {x} = 1
let {x, _} = 1
let {x, y} = 1
let {x, y, _} = 1
let {x: xCoord} = 1
let {x: xCoord, _} = 1
let {x: xCoord, y: yCoord} = 1
let {x: xCoord, y: yCoord, _} = 1
let {
  xxxxxxxxxxxxxxxxxxxxxxxxx,
  yyyyyyyyyyyyyyyyyyyyyyyyy,
  zzzzzzzzzzzzzzzzzzzzzzzzz,
} = 1
let {
  xxxxxxxxxxxxxxxxxxxxxxxxx,
  yyyyyyyyyyyyyyyyyyyyyyyyy,
  zzzzzzzzzzzzzzzzzzzzzzzzz,
  _,
} = 1

let {x: y} = z
let {x: x as y} = z
"
`;

exports[`tuple.ns 1`] = `
"// let (a,) = 1 -> one-element tuples are not supported
let (a, b) = 1
let (
  aaaaaaaaaaaaaaaaaaaaaaaaaa,
  bbbbbbbbbbbbbbbbbbbbbbbbbb,
  cccccccccccccccccccccccccc,
) = 1
"
`;

exports[`type.ns 1`] = `
"let #...shape = x
let #...\\\\\\"Shape\\" = x
let #...\\\\\\"type\\" = x
let #...\\\\\\"test 🏚\\" = x
let #...\\\\\\"Shape✅\\" = x

switch (selectedChoice, value) {
| (#...A.a, #...A.a) => true
| (#...A.b, #...A.b) => true
| (#...A.c, #...A.c) => true
| _ => false
}
"
`;

exports[`var.ns 1`] = `
"let foo = 1

let superLongIdentifierLongSoooooooooooooLooooooooooooooooooooooooooooooooooooooong = 1
"
`;

exports[`variant.ns 1`] = `""`;
