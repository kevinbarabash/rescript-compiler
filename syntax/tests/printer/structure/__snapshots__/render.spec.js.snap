// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`attribute.js 1`] = `
"@@standaloneAttribute

@@import(\\"react\\")

@@ssuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuperLoooongName(
  \\"function() {return 1}\\"
)
"
`;

exports[`exception.res 1`] = `
"exception ExitEarly
exception ExitEarly(int)
exception ExitEarly({x: int})
exception ExitEarly({\\"jsExit\\": int})
exception ExitEarly({@attr \\"jsExit\\": int})
exception ExitEarly({@attr \\"jsExit\\": int})
exception ExitEarly({@attr \\"jsExit\\": int, @attr \\"code\\": int})
exception ExitEarly({\\"jsExit\\": int})
exception ExitEarly({\\"jsExit\\": int}, {\\"code\\": int})
exception ExitEarly({\\"jsExit\\": int}, int, {\\"code\\": int})
exception ExitEarly(
  {@attr \\"jsExit\\": int, @attr \\"code\\": int},
  {@attr \\"jsExit\\": int, @attr \\"code\\": int},
)
exception ExitJsStyle({..})
exception ExitJsStyle({..\\"code\\": int})
exception ExitJsStyle({..\\"code\\": int})
exception ExitJsStyle({..@attr \\"code\\": int})
exception ExitJsStyle({..@attr \\"code\\": int})
exception ExitJsStyle({..\\"code\\": int, \\"time\\": int})
exception ExitJsStyle({..@attr \\"code\\": int, @attr \\"time\\": int})

@onConstructor exception ExitEarly
@onConstructor exception ExitEarly(int)

exception Exit = Terminate
exception Exit = Lib.Terminate
exception Exit = Ns.Lib.Terminate

@onConstructor exception Exit = Terminate
@onConstructor exception Exit = Lib.Terminate
exception GadtExit(int): exit<int>
"
`;

exports[`expr.js 1`] = `
"@attrOnStructure
expr

@attrOnStructure
(@attrOnExpr expr)

@attrOnStructure @attrOnStructure2 @attrOnStructurer3 @attrOnStructure4
(@attrOnExpr @attrOnExpr @attrOnExpr @attrOnExpr @attrOnExpr expr)

@attrOnStructure
@attrOnStructure2
@attrOnStructurer3
@attrOnStructure4
@attrOnStructure5
(
  @attrOnExpr
  @attrOnExpr
  @attrOnExpr
  @attrOnExpr
  @attrOnExpr
  @attrOnExpr
  @attrOnExpr
  expr
)
"
`;

exports[`extension.js 1`] = `
"%%raw(\\"__eval__gc()\\")

@attr
%%raw(\\"__eval__gc()\\")

@attrStructureLvl @attrStructureLvl2 @attrStructureLvl3
%%raw(\\"__eval__gc()\\")

@attrStructureLvl
@attrStructureLvl2
@attrStructureLvl3
@attrStructureLvl4
@attrStructureLvl5
%%raw(\\"__eval__gc()\\")

%%private(@module(\\"./logo.svg\\") external logo: string = \\"default\\")
"
`;

exports[`external.js 1`] = `
"@val external null: reactElement = \\"null\\"

external string: string => reactElement = \\"%identity\\"

external array: array<reactElement> => reactElement = \\"%identity\\"

external refToJsObj: reactRef => {..} = \\"%identity\\"

external \\\\\\"type\\": \\\\\\"let\\" => \\\\\\"Uident\\" = \\"unsafe_call\\"
"
`;

exports[`include.js 1`] = `
"include Belt

@attr
include WebGl

include (
  /* Use varargs to avoid the ReactJS warning for duplicate keys in children */
  {
    @val @module(\\"react\\")
    external createElementInternalHack: 'a = \\"createElement\\"
    @send
    external apply: (
      'theFunction,
      'theContext,
      'arguments,
    ) => 'returnTypeOfTheFunction = \\"apply\\"

    let createElementVariadic = (domClassName, ~props=?, children) => {
      let variadicArguments =
        [Obj.magic(domClassName), Obj.magic(props)] |> Js.Array.concat(children)
      createElementInternalHack->apply(Js.Nullable.null, variadicArguments)
    }
  }: {
    let createElementVariadic: (
      string,
      ~props: props=?,
      array<React.element>,
    ) => React.element
  }
)
"
`;

exports[`moduleBinding.js 1`] = `
"module React = {
  type t

  let render = () => Js.log(\\"foo\\")
}
"
`;

exports[`moduleTypeDeclaration.js 1`] = `
"module type S = X
"
`;

exports[`open.js 1`] = `
"open Belt

@attr
open Belt

open! Belt
"
`;

exports[`recModules.js 1`] = `
"module rec A: Map = {
  let m = 2
}
and B: Set = {
  let s = 1
}

@onFirstBinding
module rec A: Map = {
  let m = 2
}
@onSecondBinding
and B: Set = {
  let s = 1
}

@onFirstBindingOfNext
module rec A: Map = {
  let m = 2
}
@onSecondBindingOfNext
and B: Set = {
  let s = 1
}
"
`;

exports[`type.js 1`] = `
"type t = string and s = int and z = float

type t = string
and s = int
and z = float

type t = string

and s = int

and z = float
"
`;

exports[`typeExtension.js 1`] = `
"type t += Foo
type Foo.Bar.t += Foo
type t<'a, 'b> += Foo('a)
type Foo.Bar.t<'a, 'b> += Foo('a)

type t += private Foo
type t += private Foo | Bar
type t += private Foo
type t += private Foo | Bar

type t += Circle(string, int) | Point({x: int, y: int})
type t += Circle(string, int) | Point({x: int, y: int})

type t += Foo = Bar
type t += Foo = Bar | Circle = Circle2
type t += Foo = Bar | Circle = Geo.Circle2
type t += private Foo = Bar
type t += private Foo = Bar | Circle = Circle2
type t += private Foo = Bar | Circle = Geo.Circle2
type t += Foo = Bar
type t += Foo = Bar | Circle = Circle2
type t += Foo = Bar | Circle = Geo.Circle2
type t += private Foo = Bar
type t += private Foo = Bar | Circle = Circle2
type t += private Foo = Bar | Circle = Geo.Circle2
type t += Foo = Geo.Metry.Bar

@attr type t += @attr1 Foo
@attr
type t += @attr1 Foo
@attr
type t += @attr1 Foo | @attr2 Bar
@attr
type t += @attr1 Foo | @attr2 Bar

@attr
type t += private @attr1 Foo
@attr
type t += private @attr1 Foo
@attr
type t += private @attr1 Foo | @attr2 Bar
@attr
type t += private @attr1 Foo | @attr2 Bar

@attr
type t += @attr1 Foo = Bar
@attr
type t += @attr1 Foo = Bar
@attr
type t += @attr1 Foo = Foo2 | @attr2 Bar = Bar2
@attr
type t += @attr1 Foo = Foo2 | @attr2 Bar = Bar2

@attr
type t += private @attr1 Foo = Foo2
@attr
type t += private @attr1 Foo = Foo2
@attr
type t += private @attr1 Foo = Foo2 | @attr2 Bar = Bar2
@attr
type t += private @attr1 Foo = Foo2 | @attr2 Bar = Bar2

type t +=
  private
  | @attr1 Foo = Foo2

type t +=
  private
  | @attr1 Foo = Foo2
  | @attr2 Bar = Bar2

type t +=
  | Foo = Bar

module Tid = {
  type t<_> = ..
  type s<_> = ..
  type u<_> = ..
}

module type Tid = {
  type t
  type Tid.t<_> += Tid: Tid.t<t>

  type Tid.s<_> +=
    | Tid: Tid.s<t>

  type Tid.u<_> +=
    | Uid: Tid.u<t>
    | Uid2: Tid.u<t>
}
"
`;

exports[`valueBinding.js 1`] = `
"let x = 1 and y = 2 and z = 3

let x = 1
and y = 2
and z = 3

let x = 1

and y = 2

and z = 3

@react.component
let make = () => <div />

@react.component let make = () => <div />

@react.component let make = () => <div />
@react.recursiveComponent and otherMake = () => <div />

@react.component let make = () => <div />
@react.recursiveComponent
and otherMake = () => <div />

@ocaml.doc(\\" {b See} {!length} \\")
external size: array<'a> => int = \\"%array_length\\"

@ocaml.doc(\\" {b See} {!length} \\")
external size: array<'a> => int = \\"%array_length\\"
"
`;
