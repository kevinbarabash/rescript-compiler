// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StaticReactTypes.js 1`] = `
"type empty = Empty_
/*
 * Also create another form for splicing in nodes into otherwise fixed length
 * sets.
 */
type elem<'t> =
  | Empty: elem<empty>
  | Element(renderable<('s, 'a) => 'sub>): elem<('s, 'a) => 'sub>
  | TwoElements(elem<'t1>, elem<'t2>): elem<('t1, 't2)>
  /*
   * Not an ordered map yet, but should be.
   */
  | ElementMap(list<elem<'t>>): elem<list<'t>>
/**
 * Instance subtree. Mirrors the shape of JSX, instead of just being a List.
 */
and subtree<'t> =
  | EmptyInstance: subtree<empty>
  | Instance(inst<('s, 'a) => 'sub>): subtree<('s, 'a) => 'sub>
  /* Having TwoInstances mirror the fact that TwoElements requires sub
   * elements, was probably overkill. */
  | TwoInstances(subtree<'t1>, subtree<'t2>): subtree<('t1, 't2)>
  | InstanceMap(list<subtree<'t>>): subtree<list<'t>>
and reducer<'t> = (inst<'t>, 'a) => 's constraint 't = ('s, 'a) => 'sub
/*
 * These are just convenient shortcuts to specifiying the entire spec.  It just
 * makes it so you don't have to do a spread onto a record, since in
 * static-by-default trees, you don't need to define a record beforehand.
 */
and componentSpec<'t> =
  /* Add more forms here for convenience */
  | Reducer('s, elem<'sub>, reducer<'t>) constraint 't = ('s, 'a) => 'sub
and self<'t> = {
  reduceEvent: 'e. ('e => 'a, 'e) => unit,
  /**
   * Implements the ability to cause your node to be swapped out from within
   * its tree. Not purely functional by design. This is for things like
   * external subscriptions that don't arive via propagations through the tree.
   * However, this is better than simple naive mutation. That's because this
   * \\"out of nowhere\\" operation notifies the root of the tree that it should
   * perform a mutation. That allows the root to create an entirely new
   * reference, leaving the previous tree completely in tact! There isn't a
   * single mutable reference cell in the entire tree - only the root node is
   * mutable, and even then it doesn't have to be.
   *
   * This Api takes highly imperative operations like request animation frame,
   * and allows them to work well with what would otherwise be a purely
   * functional data structure (aside from the side effects caused by
   * subscribing upon mount etc).
   */
  send: 'a => unit,
} constraint 't = ('s, 'a) => 'sub
/**
 * The result of applying props. Now the result is a function that just waits
 * for React to supply the state, and in turn returns the componentSpec.
 */
and renderable<'t> = (~state: 's=?, self<'t>) => componentSpec<'t>
  constraint 't = ('s, 'a) => 'sub
/*
 * TODO: Can store the subreplacer in the instance so we don't need to
 * recompute it every time.
 */
and inst<'t> = {
  /* Memoized just for performance */
  replacer: replacer<'t>,
  /* Memoized just for performance */
  subreplacer: subreplacer<'sub>,
  self: self<'t>,
  renderable: renderable<'t>,
  spec: componentSpec<'t>,
  subtree: subtree<'sub>,
} constraint 't = ('s, 'a) => 'sub
/*
 * A series of chained functions that forms a fishing line that each component
 * has a handle to. When invoked it can cause its own individual instance node
 * in the tree to be replaced in the *root* tree that it exists in! This is
 * totally type safe, and requires no dynamic casts, and no searching through
 * the tree.
 */
/* Make it even more generalized on action than necessary to avoid GADT
 * errors. */
and replacer<'t> = (inst<'t> => inst<'t>) => unit
  constraint 't = ('s, 'a) => 'sub
and subreplacer<'sub> = (subtree<'sub> => subtree<'sub>) => unit
"
`;

exports[`arity.ml 1`] = `
"let _ = Constructor(a, b)
let _ = #Constructor(a, b)

let _ = switch a {
| C(c, d) => 1
}

let _ = switch a {
| #C(c, d) => 1
}
"
`;

exports[`attributes.res 1`] = `
"@attr(: int)
let x = 1

@attr(? var)
let x = 1

@attr(? var if x === 1)
let x = 1

%ext(: let x: int)
%ext(:
  let x: int
  let y: float
)

%%ext(
  \\"A\\"
  \\"B\\"
)
"
`;

exports[`case.js 1`] = `
"let printExprFunParameters = (~uncurried, parameters) =>
  switch parameters {
  | list{([], Asttypes.Nolabel, None, {Parsetree.ppat_desc: Ppat_any})}
    if !uncurried =>
    Doc.text(\\"_\\")
  | list{(
      [],
      Asttypes.Nolabel,
      None,
      {Parsetree.ppat_desc: Ppat_var(stringLoc)},
    )} if !uncurried =>
    Doc.text(stringLoc.txt)
  | list{(
      [],
      Nolabel,
      None,
      {ppat_desc: Ppat_construct({txt: Longident.Lident(\\"()\\")}, None)},
    )} if !uncurried =>
    Doc.text(\\"()\\")
  | parameters =>
    let lparen = if uncurried {
      Doc.text(\\"(. \\")
    } else {
      Doc.lparen
    }
    let shouldHug = ParsetreeViewer.parametersShouldHug(parameters)
    let printedParamaters = Doc.concat(list{
      if shouldHug {
        Doc.nil
      } else {
        Doc.softLine
      },
      Doc.join(
        ~sep=Doc.concat(list{Doc.comma, Doc.line}),
        List.map(printExpFunParameter, parameters),
      ),
    })
    Doc.group(
      Doc.concat(list{
        lparen,
        if shouldHug {
          printedParamaters
        } else {
          Doc.indent(printedParamaters)
        },
        if shouldHug {
          Doc.nil
        } else {
          Doc.concat(list{Doc.trailingComma, Doc.softLine})
        },
        Doc.rparen,
      }),
    )
  }

let isHuggableExpression = expr =>
  switch expr.pexp_desc {
  | Pexp_array(_)
  | Pexp_tuple(_)
  | Pexp_construct({txt: Longident.Lident(\\"::\\")}, _)
  | Pexp_construct({txt: Longident.Lident(\\"[]\\")}, _)
  | Pexp_extension({txt: \\"bs.obj\\"}, _)
  | Pexp_record(_) => true
  | _ => false
  }

switch colour {
| Red
| Blue
| (Green | Purple | Rosa)
| (Black | White)
| AnotherColoooooour => x
}

let precedence = x =>
  switch x {
  | HashEqual
  | ColonEqual => 1
  | Lor => 2
  | Land => 3
  | Equal
  | EqualEqual
  | EqualEqualEqual
  | LessThan
  | GreaterThan
  | BangEqual
  | BangEqualEqual
  | LessEqual
  | GreaterEqual
  | BarGreater => 4
  | Plus
  | PlusDot
  | Minus
  | MinusDot
  | PlusPlus => 5
  | Asterisk
  | AsteriskDot
  | Forwardslash
  | ForwardslashDot => 6
  | Exponentiation => 7
  | Hash
  | HashHash
  | MinusGreater => 8
  | Dot => 9
  | _ => 0
  }

let first = switch first {
| Some(x) => x
| None => (\\"\\": format6<_>)
}

// spread over multiple lines, because author used multiple lines
switch a {
| B
| C
| D => 1
| E => 2
}

// keep on one line, author kept it on one line
switch a {
| B | C | D => 1
| E => 2
}

// should naturally break over multiple lines
switch a {
| Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
| Ccccccccccccccccccccccccccccccccccccccccccccccccccccc
| Dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
| Eeeeeeeeeeeeee => 1
| E => 2
}
"
`;

exports[`char.js 1`] = `
"let x = 'a'
let x = '\\\\\\\\'
let x = '\\\\''
let x = '\\\\n'
let x = '\\\\t'
let x = '\\\\b'
let x = '\\\\r'
let x = ' '
let x = '\\\\017'
let x = '\\\\170'
let x = '\\\\179'
"
`;

exports[`comments.res 1`] = `
"/* nested /* comments */ */

/* lvl 0 /* lvl 1 /* lvl 2 */ */ */
let x = 1
"
`;

exports[`fatSlider.res 1`] = `
"open React

module Range = {
  /* This library's API requires that props be spread on the elements for thumb */
  /* and track. Not great, but it's what we have. */
  /* See https://github.com/reasonml/reason-react/blob/master/docs/clone-element.md */
  /* We'll need to spread both the style inside the props, and the props object itself using ReasonReact.cloneElement. */
  type rec propsThatNeedSpreading = {style: ReactDOMRe.Style.t}
  type rec renderTrackParams = {
    props: propsThatNeedSpreading,
    children: React.element,
  }

  @module(\\"react-range\\") @react.component
  external make: (
    ~min: int,
    ~max: int,
    ~values: array<int>,
    ~onChange: array<int> => unit,
    ~renderTrack: renderTrackParams => React.element,
    ~renderThumb: renderTrackParams => React.element,
  ) => React.element = \\"Range\\"
}

@react.component
let make = (~min=50, ~max=250, ~meterSuffix=?) => {
  let (values, values_set) = React.useState(_ => [min])

  <div className=\\"w-full flex flex-col items-center\\">
    <div className=\\"outer bg-gray-200 rounded-full w-full py-2 px-10\\">
      <Range
        min
        max
        values
        onChange={v => values_set(_ => v)}
        renderTrack={({props, children}) => {
          let element = <div className=\\"h-16\\" style=props.style> children </div>

          ReasonReact.cloneElement(element, ~props=Obj.magic(props), [children])
        }}
        renderThumb={({props}) => {
          let element =
            <div
              className=\\"finger h-16 w-16 rounded-full bg-gray-700 cursor-pointer focus:outline-none focus:shadow-outline\\"
              style=props.style
            />

          ReasonReact.cloneElement(element, ~props=Obj.magic(props), [])
        }}
      />
    </div>
    <div className=\\"meter text-4xl font-bold text-gray-600 mt-4\\">
      {values[0]->Js.Int.toString->string}
      {meterSuffix->Belt.Option.getWithDefault(null)}
    </div>
  </div>
}
"
`;

exports[`home.res 1`] = `
"open React
let logo: string = %raw(\\"require('./assets/logo.png')\\")

@react.component
let make = () => {
  useEffect0(_ => {
    AudioPlayer.play()->ignore
    None
  })

  // Template
  <div className=\\"h-screen flex justify-between  flex-col p-8\\">
    <div className=\\"\\"> {\\"Other stuff here\\"->string} </div>
    <div id=\\"controls\\" className=\\"flex flex-col items-center\\">
      <SignaturePicker />
      <div className=\\"h-8\\" />
      <FatSlider
        meterSuffix={<span className=\\"text-lg text-gray-400\\">
          {\\" BPM\\"->string}
        </span>}
      />
      <div className=\\"h-8\\" />
    </div>
  </div>
}
"
`;

exports[`lor.js 1`] = `
"let lower = ch => lor(32, ch)
"
`;

exports[`moduleData.ml 1`] = `
"let module_data: array<
  string,
> = Obj.magic(\\"ï¿½ï¿½ï¿½ï¿½  ï¿½  ï¿½  	ï¿½  	Hï¿½\\\\\\"Gcï¿½ï¿½ï¿½$stat@  , @@ï¿½ï¿½Ð°ï¿½+minor_words@@ï¿½ï¿½ï¿½ï¿½D%float@@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½&_none_A@ ï¿½A@ï¿½Ð°ï¿½.promoted_words@@ï¿½ï¿½ï¿½
@ï¿½@ï¿½ï¿½  ï¿½@ï¿½Ð°ï¿½+major_words@@ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½Ð°ï¿½1minor_collections@@ï¿½ï¿½ï¿½ï¿½A#int@@ï¿½@ï¿½ï¿½  ï¿½@ï¿½Ð°ï¿½1major_collections@@ï¿½ï¿½ï¿½
@ï¿½@ï¿½ï¿½  ï¿½%@ï¿½Ð°ï¿½*heap_words@@ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½-@ï¿½Ð°ï¿½+heap_chunks@@ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½5@ï¿½Ð°ï¿½*live_words@@ï¿½ï¿½ï¿½\\\\\\"@ï¿½@ï¿½ï¿½  ï¿½=@ï¿½Ð°ï¿½+live_blocks@@ï¿½ï¿½ï¿½*@ï¿½@ï¿½ï¿½  ï¿½E@ï¿½Ð°ï¿½*free_words@@ï¿½ï¿½ï¿½2@ï¿½@ï¿½ï¿½  ï¿½M@ï¿½Ð°ï¿½+free_blocks@@ï¿½ï¿½ï¿½:@ï¿½@ï¿½ï¿½  ï¿½U@ï¿½Ð°ï¿½,largest_free@@ï¿½ï¿½ï¿½B@ï¿½@ï¿½ï¿½  ï¿½]@ï¿½Ð°ï¿½)fragments@@ï¿½ï¿½ï¿½J@ï¿½@ï¿½ï¿½  ï¿½e@ï¿½Ð°ï¿½+compactions@@ï¿½ï¿½ï¿½R@ï¿½@ï¿½ï¿½  ï¿½m@ï¿½Ð°ï¿½.top_heap_words@@ï¿½ï¿½ï¿½Z@ï¿½@ï¿½ï¿½  ï¿½u@ï¿½Ð°ï¿½*stack_size@@ï¿½ï¿½ï¿½b@ï¿½@ï¿½ï¿½  ï¿½}@@@A@@@}@@ï¿½@@Aï¿½ï¿½ï¿½'control@  , @@ï¿½ï¿½Ð°ï¿½/minor_heap_size@Aï¿½ï¿½ï¿½q@ï¿½@ï¿½ï¿½  ï¿½ï¿½@ï¿½Ð°ï¿½4major_heap_increment@Aï¿½ï¿½ï¿½y@ï¿½@ï¿½ï¿½  ï¿½ï¿½@ï¿½Ð°ï¿½.space_overhead@Aï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½@ï¿½Ð°ï¿½'verbose@Aï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½@ï¿½Ð° ,max_overhead@Aï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½@ï¿½Ð°+stack_limit@Aï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½@ï¿½Ð°1allocation_policy@Aï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½@ï¿½Ð°+window_size@@ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½@@@A@@@ï¿½@@GAï¿½ï¿½ï¿½$stat@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½F$unit@@ï¿½@ï¿½ï¿½  ä°³ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@ï¿½@ï¿½ï¿½ï¿½*quick_stat@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  á°³@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@ï¿½@ï¿½ï¿½ï¿½(counters@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  Û°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  Þ ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  Ý ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½0caml_gc_countersAA ï¿½@@@@ï¿½ï¿½ï¿½ +minor_words@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½@@ï¿½@ï¿½ï¿½  Ø°ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  Úï¿½3caml_gc_minor_wordsAA;caml_gc_minor_words_unboxedï¿½@@A@ï¿½ï¿½ï¿½!#get@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½T@ï¿½@ï¿½ï¿½  Õ°ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@'@ï¿½ï¿½ï¿½\\\\\\"#set@ï¿½ï¿½ï¿½@ï¿½ï¿½@ï¿½@ï¿½ï¿½  Ò°ï¿½ï¿½f@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  Ôï¿½+caml_gc_setAA6ï¿½@@@9@ï¿½ï¿½ï¿½#%minor@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½u@ï¿½@ï¿½ï¿½  Ï°ï¿½ï¿½y@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  Ñï¿½-caml_gc_minorAAIï¿½@@@L@ï¿½ï¿½ï¿½$+major_slice@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½<@ï¿½@ï¿½ï¿½  Ì°ï¿½ï¿½@@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  Îï¿½3caml_gc_major_sliceAA\\\\ï¿½@@@_@ï¿½ï¿½ï¿½%%major@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  É°ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  Ëï¿½-caml_gc_majorAAoï¿½@@@r@ï¿½ï¿½ï¿½&*full_major@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  Æ°ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  Èï¿½2caml_gc_full_majorAAï¿½ï¿½@@@ï¿½@ï¿½ï¿½ï¿½''compact@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  Ã°ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  Åï¿½2caml_gc_compactionAAï¿½ï¿½@@@ï¿½@ï¿½ï¿½ï¿½(*print_stat@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½ï¿½@*PervasivesA+out_channel ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@ï¿½@ï¿½ï¿½ï¿½)/allocated_bytes@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@ï¿½@ï¿½ï¿½ï¿½*.get_minor_free@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½3caml_get_minor_freeAAÊ @@@ï¿½@ï¿½ï¿½ï¿½+*get_bucket@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½5caml_get_major_bucketA@Ý @@@à  ï¿½'noallocï¿½@@ï¿½ï¿½ï¿½,*get_credit@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½!@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½5caml_get_major_creditA@ï¿½ï¿½@@@ï¿½ï¿½ï¿½ï¿½'noallocï¿½ï¿½@@ï¿½ï¿½ï¿½-3huge_fallback_count@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½9@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½;caml_gc_huge_fallback_countAA
ï¿½@@@@ï¿½ï¿½ï¿½.(finalise@ï¿½ï¿½ï¿½@ï¿½ï¿½@ï¿½ï¿½ï¿½!aï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½R@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½@
ï¿½ï¿½ï¿½X@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@'@ï¿½ï¿½ï¿½/-finalise_last@ï¿½ï¿½ï¿½@ï¿½ï¿½@ï¿½ï¿½ï¿½e@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½i@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½!aï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½s@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@B@ï¿½ï¿½ï¿½00finalise_release@ï¿½ï¿½ï¿½@ï¿½ï¿½ï¿½~@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@Q@ï¿½ï¿½ï¿½1%alarm@  , @@@A@@@V@@ï¿½Aï¿½ï¿½ï¿½2,create_alarm@ï¿½ï¿½ï¿½@ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@k@ï¿½ï¿½ï¿½3,delete_alarm@ï¿½ï¿½ï¿½@ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½ï¿½@ï¿½@ï¿½ï¿½  ï¿½@ï¿½ï¿½  ï¿½@y@@ï¿½ï¿½\\\\\\"Gcï¿½0ï¿½ï¿½ï¿½ï¿½Ýï¿½ï¿½}ï¿½ï¿½\`hï¿½ï¿½ï¿½ï¿½*Pervasivesï¿½0ï¿½\\\\\\"[ï¿½{ï¿½=ï¿½ï¿½ï¿½ï¿½[ï¿½ï¿½ï¿½mï¿½ï¿½\\\\\\"Jsï¿½0ï¿½ï¿½~:ï¿½Ãï¿½|ï¿½ï¿½:ï¿½ï¿½ï¿½8CamlinternalFormatBasicsï¿½0ï¿½ï¿½G2ï¿½ï¿½kï¿½ï¿½	ï¿½:usï¿½ï¿½.Bs_stdlib_miniï¿½0ï¿½_yï¿½Q\`ï¿½?ï¿½ï¿½ï¿½é  +Belt_Resultï¿½0ï¿½ï¿½&ï¿½ï¿½9ï¿½ï¿½?ï¿½Tï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½$Beltï¿½0Bï¿½rï¿½;9\\\\\\"iï¿½\`ï¿½ï¿½ï¿½@@\\" /* Gc */)
"
`;

exports[`nesting.res 1`] = `
"let unitsCommands = state.units->Js.Array2.mapi((
  {unit: targetUnit, coordinates: targetCoordinates},
  i,
) => {
  // n^2
  let res = []
  state.units->Js.Array2.forEachi((
    {
      unit: unitThatMightBeAttacking,
      coordinates: unitThatMightBeAttackingCoordinates,
    },
    j,
  ) => {
    if i !== j {
      switch Js.Array2.unsafe_get(
        unitThatMightBeAttacking.timeline,
        unitThatMightBeAttacking.currentFrame,
      ).effect {
      | Some(UnitAttack({damage, hitBox: _})) =>
        let unitThatMightBeAttackingHitBox_ = Unit.hitBox(
          unitThatMightBeAttacking,
        )
        let unitThatMightBeAttackingHitBox = {
          ...unitThatMightBeAttackingHitBox_,
          x: unitThatMightBeAttackingCoordinates.x +.
          unitThatMightBeAttackingHitBox_.x,
          y: unitThatMightBeAttackingCoordinates.y +.
          unitThatMightBeAttackingHitBox_.y,
        }
        let targetUnitHitBox_ = Unit.hitBox(targetUnit)
        let targetUnitHitBox = {
          ...targetUnitHitBox_,
          x: targetCoordinates.x +. targetUnitHitBox_.x,
          y: targetCoordinates.y +. targetUnitHitBox_.y,
        }
        let hit = hitTest(unitThatMightBeAttackingHitBox, targetUnitHitBox)

        if hit {
          // TODO: it's wrong to put this here. We don't know whether wizard resisted the attack or not
          let sparksX = targetUnitHitBox.x +. targetUnitHitBox.width /. 2.
          let sparksY = targetUnitHitBox.y +. targetUnitHitBox.height /. 2.
          let spark = {
            unit: Spark.make(
              ~spriteSheet=assets.spark,
              ~orientation=targetUnit.orientation,
              ~aspectRatio=1.,
              ~anchor=Middle,
            ),
            coordinates: {x: sparksX, y: sparksY, z: 0.},
          }
          particlesToAdd->Js.Array2.push(spark)->ignore

          res->Js.Array2.push(Unit.CommandAttacked({damage: damage}))->ignore
        }
      | _ => ()
      }
    }
  })
  res
})
"
`;

exports[`number.js 1`] = `
"let x = 0b0000_0001

let int32 = 42l
let int64 = 42L

let x = -44.20e99
let x = -44.20_34e99
let x = -44.20e+9
let x = -44.20e-9
let x = -44.20e-99_99
let x = -444_444.20e99
let x = 44.20e99
let x = 44.20_34e99
let x = 44.20e+9
let x = 44.20e-9
let x = 44.20e-99_99
let x = 44e99
let x = 44_44e99

let x = 0x0
let x = 0X0

let x = 0xAA
let x = 0XA_A
let x = 0xAA.ff
let x = 0xAA.ff_ff
let x = 0xAA.ff_ffp10
let x = 0xAA.ff_ffp+10
let x = 0xAA.ff_ffp-10
let x = 0xAA.ff_ffp100_00
let x = 0xAA.ff_ffp+100_00
let x = 0xAA.ff_ffp-100_00
"
`;

exports[`ocamlFile.ml 1`] = `
"/* parses ocaml files */
let x = {
  let a = 1
  let b = 2
  a + b
}
"
`;

exports[`ocamlInterfaceFile.mli 1`] = `
"/* parses ocaml interface file */
let x: int
"
`;

exports[`ocamlString.ml 1`] = `
"let x = \\"\\\\132\\\\149\\\\166\\"

let s = \\"\\\\123 \\\\o111 \\\\xA0\\"

let x = \\"foo\\\\010bar\\"
let x = \\"foo\\\\x0Abar\\"
let x = \\"foo\\\\o012bar\\"

let x = \\"ð this works now ð\\"
let x = \`ð this works now ð\`

/* The \`//\` should not result into an extra comment */
let x = j\`https://www.apple.com\`
let x = \`https://www.apple.com\`
let x = \`https://www.apple.com\`
let x = \`https://www.apple.com\`
let x = sql\`https://www.apple.com\`

/* /* */ should not result in an extra comments */
let x = j\`/* https://www.apple.com */\`
let x = \`/* https://www.apple.com*/\`
let x = \`/*https://www.apple.com*/\`
let x = \`/*https://www.apple.com*/\`
let x = sql\`/*https://www.apple.com*/\`

let x = \`\\\\\`https://\\\\\${appleWebsite}\\\\\`\`
"
`;

exports[`reasonArity.re 1`] = `
"let _ = Constructor(a, b)
let _ = Constructor((a, b))
let _ = #Constructor(a, b)
let _ = #Constructor(a, b)

switch a {
| C(c, d) => 1
| C((c, d)) => 1
}

switch a {
| #C(c, d) => 1
| #C(c, d) => 1
}
"
`;

exports[`reasonFile.re 1`] = `
"/* parses reason file */
let () = {
  let msg = \\"test\\"
  msg->Js.log
}
"
`;

exports[`reasonInterfaceFile.rei 1`] = `
"/* parse reason interface file */
let x: int
"
`;

exports[`reasonString.re 1`] = `
"let x = j\`foo \\\\\${bar\`
let x = j\`foo \\\\\`bar\`
let x = j\`foo \\\\\\\\bar\`
let x = j\`foo \\\\\\\\\\\\\${bar\`
"
`;

exports[`signaturePicker.res 1`] = `
"open React

module TimeSignature = {
  /* Others are 2/2 9/8 3/2 12/8 and 4/2 */
  type t =
    | TwoFour
    | ThreeFour
    | FourFour
    | SixEight

  let toString = x =>
    switch x {
    | TwoFour => \\"2/4\\"
    | ThreeFour => \\"3/4\\"
    | FourFour => \\"4/4\\"
    | SixEight => \\"6/8\\"
    }
}

@react.component
let make = () => {
  let options = {
    open TimeSignature
    list{TwoFour, ThreeFour, FourFour, SixEight}
  }

  <label className=\\"flex items-center\\">
    <div className=\\"pr-2 font-bold text-gray-400 text-lg\\">
      {\\"Signature\\"->string}
    </div>
    <select
      id=\\"country\\"
      className=\\"transition duration-150 ease-in-out sm:text-sm sm:leading-5 border-none font-bold text-2xl text-gray-600 bg-transparent\\">
      {options
      ->Belt.List.map(option =>
        <option key={option->TimeSignature.toString}>
          {option->TimeSignature.toString->string}
        </option>
      )
      ->Belt.List.toArray
      ->array}
    </select>
    <svg
      viewBox=\\"0 0 24 24\\"
      width=\\"24\\"
      height=\\"24\\"
      stroke=\\"currentColor\\"
      strokeWidth=\\"2\\"
      fill=\\"none\\"
      strokeLinecap=\\"round\\"
      strokeLinejoin=\\"round\\"
      className=\\"text-gray-400\\">
      <polyline points=\\"6 9 12 15 18 9\\" />
    </svg>
  </label>
}
"
`;

exports[`string.js 1`] = `
"let s = \\"a string with \\\\b \\\\n \\\\r \\\\t abcdef\\"

let s = \\"ð ð¤­ ð¥ ð with emojis ð ð test ð\\"

let s = \\"a \\\\\\"string inside\\\\\\" a string\\"

let s = \\"a double escaped \\\\\\\\ test\\"

let s = \\"what happens here \\\\\\\\n\\"

let s = \\"\\\\123 \\\\o111 \\\\xA0\\"
"
`;
