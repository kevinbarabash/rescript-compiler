// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bsObject.js 1`] = `
"type nonrec 'a foo = < foo: int   ;.. >  as 'a
type nonrec 'a foo = < foo: int   >  as 'a"
`;

exports[`constructorDeclaration.js 1`] = `
"type nonrec t =
  | Rgb 
type nonrec t =
  | Rgb 
type nonrec t =
  | White of grayscale 
  | Black of grayscale 
  | Rgb of int * int * int 
  | Rgba of int * int * int * int 
type nonrec t =
  | Rgb of {
  r: int ;
  g: int ;
  b: int } 
  | Rgba of {
  r: int ;
  g: int ;
  b: int ;
  a: int } 
  | JsColor of < gradient: int   >  
  | JsColor of < gradient: int   >  
  | JsColor of < gradient: int   >  
  | JsColor of < gradient: int [@attr ]  >  
  | JsColor of < gradient: int   >  * color 
  | JsColor of < gradient: int   >  * color 
  | JsColor of < gradient: int   >  * < hex: string   >  * int 
  | JsColor of < gradient: int [@attr ]  >  * < hex: string [@attr ]  >  *
  int 
  | JsT of < .. >  
  | JsT of < gradient: int   ;.. >  
  | JsT of < gradient: int   ;.. >  
  | JsT of < gradient: int [@attr ]  ;.. >  
  | JsT of < gradient: int  ;hex: string   ;.. >  *
  < gradient: int  ;hex: string   ;.. >  
  | JsT of < gradient: int [@attr ] ;hex: string [@attr ]  ;.. >  *
  < gradient: int [@attr ] ;hex: string [@attr ]  ;.. >  
type nonrec t =
  | Rgb: t 
type nonrec t =
  | Rgb: t 
type nonrec t =
  | White: grayscale -> t 
  | Black: grayscale -> t 
  | Rgb: int * int * int -> t 
  | Rgba: int * int * int * int -> t 
type nonrec t =
  | Rgb: {
  r: int ;
  g: int ;
  b: int } -> t 
  | Rgba: {
  r: int ;
  g: int ;
  b: int ;
  a: int } -> t 
  | JsColor: < gradient: int   >  -> t 
  | JsColor: < gradient: int   >  -> t 
  | JsColor: < gradient: int   >  -> t 
  | JsColor: < gradient: int   >  -> t 
  | JsColor: < gradient: int [@attr ]  >  -> t 
  | JsColor: < gradient: int   >  * color -> t 
  | JsColor: < gradient: int   >  * color -> t 
  | JsColor: < gradient: int   >  * < hex: string   >  * int -> t 
  | JsT: < .. >  -> t 
  | JsT: < gradient: int   ;.. >  -> t 
  | JsT: < gradient: int [@attr ]  ;.. >  -> t 
  | JsT: < gradient: int   ;.. >  -> t 
  | JsT: < gradient: int [@attr ]  ;.. >  -> t 
  | JsT: < gradient: int   ;.. >  -> t 
  | JsT: < gradient: int  ;hex: string   ;.. >  *
  < gradient: int  ;hex: string   ;.. >  -> t 
  | JsT: < gradient: int [@attr ] ;hex: string [@attr ]  ;.. >  *
  < gradient: int [@attr ] ;hex: string [@attr ]  ;.. >  -> t 
type nonrec t =
  | EmptyColor [@attr ]
  | White: grayscale -> ((t)[@onGadt ]) [@onConstr ]
type nonrec (_, 'value) node =
  | Root: {
  mutable value: 'value ;
  mutable updatedTime: float } -> (root, 'value) node 
  | Derived:
  {
  mutable cachedValue: 'value ;
  parent: (_, 'value) node ;
  root: (root, 'value) node ;
  updateF: 'value -> 'value ;
  mutable updatedTime: float } -> (derived, 'value) node "
`;

exports[`diamond.js 1`] = `"type nonrec ('a, 'b) t = .."`;

exports[`polyvariant.js 1`] = `
"type t = [ \`X ]
type t = [>]
type t = [> s]
type t = [< s]
type t = [ s]
type t = [> s]
type t = [< s]
type t = [ \`a ]
type t = [> \`a ]
type t = [< \`a ]
type t = [ \`a ]
type t = [> \`a ]
type t = [< \`a ]
type t = [ s | t]
type t = [> \`a ]
type t = [> \`a ]
type t = [< \`A of int ]
type t = [< \`A of int ]
type t = [< \`A of int ]
type t = [< \`A of int ]
type t = [< \`A of int ]
type t = [< \`A of int&int  | \`B ]
type t = [< \`A of int&int  | \`B ]
type t = [ \`a  | \`b  | \`c ]
type t =
  [ \`aaaaa  | \`bbbbb  | \`ccccc  | \`ddddd  | \`eeeee  | \`fffff  | \`ggggg 
  | \`hhhhh  | \`jjjjj  | \`kkkkk ]
type t =
  | Aaaaaa 
  | Bbbbbb 
  | Cccccc 
  | Dddddd 
  | Eeeeee 
  | Ffffff 
  | Gggggg 
  | Hhhhhh 
  | Jjjjjj 
  | Kkkkkk 
type t = [ \`a of int ]
type t =
  [< \`A of int  | \`B of (int * int)  | \`C of float  | \`D of int&string 
  | \`E of (int * int)&(string * string * string)&float  | \`F of string ]
type z = [< \`A of string&int  | \`B ]
type nonrec z = [< \`A  | \`B > \`X]
type nonrec z = [< \`A  | \`B > \`X \`Y]
type 'a vlist = [ \`Nil  | \`Cons of ('a * 'a vlist) ]
type nonrec t = [ \`x of int [@a ][@b ][@c ]]
type nonrec t = [ \`x of int [@a ][@b ][@c ] | ((foo)[@d ][@e ])]
type nonrec t = [> ((x)[@a ])]
type nonrec t = [> ((x)[@a ])]
type nonrec t = [> \`x [@a ]]
type nonrec t = [> \`x [@a ]]
type nonrec t = [< \`x [@a ]]
type nonrec t = [< \`x [@a ]]
type nonrec t =
  [< \`a of ((int * int) * int) [@one ] | ((int)[@two ])
  | \`b of string [@three ]> \`w \`x \`y]
let f (x : [ \`b ]) = x"
`;

exports[`privateTypeEquation.js 1`] = `
"type nonrec t = private 'a
type nonrec t = private string
type nonrec t = private _
type nonrec t = private int
type nonrec t = private int -> int
type nonrec t = private int -> int
type nonrec t = private int -> int -> int
type nonrec t = private
  int -> x:((string)[@ns.namedArgLoc ]) -> float -> unit
type nonrec t = private string as 'x
type nonrec t = private [%ext ]
type nonrec t = private [%ext \\"console.log\\"]
type nonrec t = private React.element"
`;

exports[`recordDeclaration.js 1`] = `
"type nonrec t = {
  x: int }
type nonrec t = {
  mutable x: int }
type nonrec t = {
  x: int }
type nonrec t = {
  mutable x: int }
type nonrec t = {
  x: int ;
  y: int }
type nonrec t = {
  mutable x: int ;
  mutable y: int }
type nonrec t = {
  x: int ;
  y: int }
type nonrec t = {
  mutable x: int ;
  mutable y: int }
type nonrec t = {
  x: 'a 'b . polyType }
type nonrec t = {
  x: int [@attr ];
  y: int [@attr2 ]}
type nonrec t =
  {
  x: ((int)[@onInt ]) [@rowAttr ];
  y: ((int)[@onInt ]) [@rowAttr2 ]}
type nonrec t = {
  form: form }
type nonrec t = {
  mutable form: form }
type nonrec t = {
  form: form ;
  answers: answers }
type nonrec t = {
  mutable form: form ;
  mutable answers: answers }
type nonrec t = < age: int   > 
type nonrec t = < .. > 
type nonrec t = < age: int   > 
type nonrec t = < age: int   ;.. > 
type nonrec t = < age: int  ;name: string   ;.. > 
type nonrec t = < age: int [@attr ]  ;.. > 
type nonrec t = < age: int [@attr ]  ;.. > 
type nonrec t = < age: int [@attr ] ;name: string [@attr ]  ;.. > 
type nonrec t = < age: int [@attr ]  > 
type nonrec t = < age: int [@attr ]  > 
type nonrec t = < age: int [@attr ] ;name: string   > 
type nonrec t = < age: int [@attr ] ;name: string [@attr2 ]  > 
type nonrec domProps =
  {
  label: string [@bs.optional ];
  list: string [@bs.optional ];
  loop: bool [@bs.optional ]}"
`;

exports[`typeConstraint.js 1`] = `
"type nonrec t = x constraint 'x = int
type nonrec t = x constraint 'x = string constraint 'y = unit
type nonrec t = x constraint 'a = ((typExpr)[@attr ])"
`;

exports[`typeDefinition.js 1`] = `
"type nonrec t = string
type nonrec t = string
and s = int
type nonrec t = string
and s = int
and u = float
type t = t node
type t = string
and s = int
type t = string
and s = int
and u = float"
`;

exports[`typeInformation.js 1`] = `
"type nonrec t
type nonrec t = Module.t
type nonrec t = Module.t constraint 'a = int
type nonrec t = Module.t constraint 'a = int constraint 'b = string
type nonrec t = {
  a: int }
type nonrec t = {
  a: int } constraint 'a = int
type nonrec t = {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t = Module.t = {
  a: int }
type nonrec t = Module.t = {
  a: int } constraint 'a = int
type nonrec t = Module.t =
  {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t = node
type nonrec t = node constraint 'a = int
type nonrec t = node constraint 'a = int constraint 'b = string
type nonrec t = node = {
  a: int }
type nonrec t = node = {
  a: int } constraint 'a = int
type nonrec t = node = {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t = ..
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t = private
  | Green 
type nonrec t = private
  | Green  constraint 'a = unit
type nonrec t = private
  | Green  constraint 'a = unit constraint 'b = unit
type nonrec t = {
  x: int ;
  y: int }
type nonrec callback = (ReactEvent.Mouse.t -> unit) as 'callback
type nonrec callback = ReactEvent.Mouse.t -> unit as 'u
type nonrec callback = (ReactEvent.Mouse.t -> unit) as 'callback"
`;

exports[`typeNonrec.js 1`] = `
"type nonrec t =
  | Water "
`;

exports[`typeRepresentation.js 1`] = `
"type nonrec t = ..
type nonrec t = private ..
type nonrec t =
  | Blue 
type nonrec t =
  | Blue 
type nonrec t =
  | Blue 
  | Red 
type nonrec t =
  | Blue 
  | Red 
type nonrec t =
  | Blue 
  | Red 
  | Green 
type nonrec t =
  | Blue 
  | Red 
  | Green 
type nonrec t = private
  | Blue 
type nonrec t = private
  | Blue 
type nonrec t = private
  | Blue 
  | Red 
type nonrec t = private
  | Blue 
  | Red 
type nonrec t = private
  | Blue 
  | Red 
  | Green 
type nonrec t = private
  | Blue 
  | Red 
  | Green 
type nonrec t = {
  x: int ;
  y: int }
type nonrec t = private {
  x: int ;
  y: int }"
`;

exports[`typedef.js 1`] = `
"type nonrec t
type nonrec t
and s
type nonrec 'a t
type nonrec 'a t
and 'a s
type nonrec ('a, 'b) t
and ('a, 'b) s
type nonrec 'a t = 'a node
and 'b s = 'b edge"
`;

exports[`typeparams.js 1`] = `
"type nonrec 'a t
type nonrec ('a, 'b) t
type nonrec ('a, 'b, 'c) t
type nonrec (+'a, -'b, +_, -_) t
type nonrec _ t"
`;

exports[`typext.js 1`] = `
"type t +=  
  | Foo 
type Foo.Bar.t +=  
  | Foo 
type ('a,'b) t +=  
  | Foo of 'a 
type ('a,'b) Foo.Bar.t +=  
  | Foo of 'a 
type t += private  
  | Foo 
type t += private  
  | Foo 
  | Bar 
type t += private  
  | Foo 
type t += private  
  | Foo 
  | Bar 
type t +=  
  | Circle of string * int 
  | Point of {
  x: int ;
  y: int } 
type t +=  
  | Circle of string * int 
  | Point of {
  x: int ;
  y: int } 
type t +=  
  | Foo = Bar
type t +=  
  | Foo = Bar
  | Circle = Circle2
type t +=  
  | Foo = Bar
  | Circle = Geo.Circle2
type t += private  
  | Foo = Bar
type t += private  
  | Foo = Bar
  | Circle = Circle2
type t += private  
  | Foo = Bar
  | Circle = Geo.Circle2
type t +=  
  | Foo = Bar
type t +=  
  | Foo = Bar
  | Circle = Circle2
type t +=  
  | Foo = Bar
  | Circle = Geo.Circle2
type t += private  
  | Foo = Bar
type t += private  
  | Foo = Bar
  | Circle = Circle2
type t += private  
  | Foo = Bar
  | Circle = Geo.Circle2
type t +=  
  | Foo = Geo.Metry.Bar
type t +=  
  | Foo [@attr1 ][@@attr ]
type t +=  
  | Foo [@attr1 ][@@attr ]
type t +=  
  | Foo [@attr1 ]
  | Bar [@attr2 ][@@attr ]
type t +=  
  | Foo [@attr1 ]
  | Bar [@attr2 ][@@attr ]
type t += private  
  | Foo [@attr1 ][@@attr ]
type t += private  
  | Foo [@attr1 ][@@attr ]
type t += private  
  | Foo [@attr1 ]
  | Bar [@attr2 ][@@attr ]
type t += private  
  | Foo [@attr1 ]
  | Bar [@attr2 ][@@attr ]
type t +=  
  | Foo[@attr1 ] = Bar[@@attr ]
type t +=  
  | Foo[@attr1 ] = Bar[@@attr ]
type t +=  
  | Foo[@attr1 ] = Foo2
  | Bar[@attr2 ] = Bar2[@@attr ]
type t +=  
  | Foo[@attr1 ] = Foo2
  | Bar[@attr2 ] = Bar2[@@attr ]
type t += private  
  | Foo[@attr1 ] = Foo2[@@attr ]
type t += private  
  | Foo[@attr1 ] = Foo2[@@attr ]
type t += private  
  | Foo[@attr1 ] = Foo2
  | Bar[@attr2 ] = Bar2[@@attr ]
type t += private  
  | Foo[@attr1 ] = Foo2
  | Bar[@attr2 ] = Bar2[@@attr ]
module Tid =
  struct type nonrec _ t = ..
         type nonrec _ s = ..
         type nonrec _ u = .. end
module type Tid  =
  sig
    type nonrec t
    type _ Tid.t +=  
      | Tid: t Tid.t 
    type _ Tid.s +=  
      | Tid: t Tid.s 
    type _ Tid.u +=  
      | Uid: t Tid.u 
      | Uid2: t Tid.u 
  end"
`;
