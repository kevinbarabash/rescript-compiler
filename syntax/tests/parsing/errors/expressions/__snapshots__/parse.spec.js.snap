// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ambiguousArrow.js 1`] = `
"=====Parsetree==========================================
let a b = (\\"hi\\" : int)
let x = ((let a = 1 in let b = 2 in fun pattern -> (\\"test\\" : int))
  [@ns.braces ])
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/ambiguousArrow.js 1:9-21  
  1 │ let a = b:int => \\"hi\\"
  2 │ 
  3 │ let x = {
  
  Did you mean to annotate the parameter type or the return type?
  1) (b): int => \\"hi\\"
  2) (b: int) => \\"hi\\"

  
  Syntax error!
  parsing/errors/expressions/ambiguousArrow.js 6:3-23  
  4 │   let a = 1
  5 │   let b = 2
  6 │   a + b : int => \\"test\\"
  7 │ }
  8 │ 
  
  Did you mean to annotate the parameter type or the return type?
  1) (pattern): int => \\"test\\"
  2) (pattern: int) => \\"test\\"

  
========================================================"
`;

exports[`array.js 1`] = `
"=====Parsetree==========================================
let xs = x.map (fun key -> [|key;(predicates.(key))|])
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/array.js 2:44  
  1 │ // missing ] before )
  2 │ let xs = x.map(key => [key, predicates[key])
  3 │ 
  
  Did you forget a \`]\` here? 
  
========================================================"
`;

exports[`arrow.js 1`] = `
"=====Parsetree==========================================
;;(Object.keys providers).reduce
    (fun elements ->
       fun providerId -> ((let x = 1 in let b = 2 in x + b)[@ns.braces ]))
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/arrow.js 1:52  
  1 │ Object.keys(providers).reduce((elements, providerId] => {
  2 │   let x = 1
  3 │   let b = 2
  
  Did you forget a \`,\` here? 
  
========================================================"
`;

exports[`block.js 1`] = `
"=====Parsetree==========================================
let findThreadByIdLinearScan ~threads:((threads)[@ns.namedArgLoc ]) 
  ~id:((id)[@ns.namedArgLoc ])  =
  ((Js.Array2.findi ThreadsModel.threads
      (fun thread ->
         fun i ->
           ((let thisId =
               match thread with
               | ServerData.OneToOne { otherPersonIDWhichIsAlsoThreadID } ->
                   otherPersonIDWhichIsAlsoThreadID
               | Group { id } -> id
               | Unknown { id } ->
                   (unknown.id |. Js.String.make) |. FBID.ofStringUnsafe in
             thisId == id)
           [@ns.braces ])))
  [@ns.braces ])
let x = ((loop 0 (Nil |. (push doc)))[@ns.braces ])
;;match stack with
  | Empty -> [%napkinscript.exprhole ]
  | Cons (doc, rest) -> ()
  | Join (doc1, doc2) -> (buffer |. (Buffer.add_string indentation); loop ())
let pipeline =
  match scheduler with | Some -> [%napkinscript.exprhole ] | None -> ()
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/block.js 14:4-15:1  
  12 │ 
  13 │     thisId === id
  14 │   }
  15 │ }
  16 │ 
  17 │ let x = {
  
  Did you forget a \`)\` here? 
  
  Syntax error!
  parsing/errors/expressions/block.js 18:25-19:1  
  16 │ 
  17 │ let x = {
  18 │   loop(0, Nil->push(doc)
  19 │ } // closing ) above is missing
  20 │ 
  21 │ switch stack {
  
  Did you forget a \`)\` here? 
  
  Syntax error!
  parsing/errors/expressions/block.js 22:11-23:1  
  20 │ 
  21 │ switch stack {
  22 │ | Empty =>
  23 │ | Cons(doc, rest) => ()
  24 │ | Join(doc1, doc2) =>
  25 │ 	buffer->Buffer.add_string(indentation)
  
  Looks like there might be an expression missing here
  
  Syntax error!
  parsing/errors/expressions/block.js 26:7-27:1  
  24 │ | Join(doc1, doc2) =>
  25 │ 	buffer->Buffer.add_string(indentation)
  26 │ 	loop(
  27 │ }
  28 │ 
  29 │ let pipeline = switch scheduler {
  
  Did you forget a \`)\` here? 
  
  Syntax error!
  parsing/errors/expressions/block.js 30:10-31:1  
  28 │ 
  29 │ let pipeline = switch scheduler {
  30 │ | Some =>
  31 │ | None => ()
  32 │ }
  33 │ 
  
  Looks like there might be an expression missing here
  
========================================================"
`;

exports[`consecutive.res 1`] = `
"=====Parsetree==========================================
let f a b = a + 3
;;b
let f g h = ((a + 3; b)[@ns.braces ])
let () = ((sideEffect1 (); sideEffect2 ())[@ns.braces ])
let () = ((let open Foo in let exception End  in x ())[@ns.braces ])
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/consecutive.res 1:23  
  1 │ let f = (a,b) => a + 3b;
  2 │ 
  3 │ let f = (g, h) => {
  
  consecutive statements on a line must be separated by ';' or a newline
  
  Syntax error!
  parsing/errors/expressions/consecutive.res 4:7  
  2 │ 
  3 │ let f = (g, h) => {
  4 │  a + 3b
  5 │ }
  6 │ 
  
  consecutive expressions on a line must be separated by ';' or a newline
  
  Syntax error!
  parsing/errors/expressions/consecutive.res 8:16-27  
   6 │ 
   7 │ let () = {
   8 │   sideEffect1() sideEffect2()
   9 │ }
  10 │ 
  
  consecutive expressions on a line must be separated by ';' or a newline
  
  Syntax error!
  parsing/errors/expressions/consecutive.res 12:11-20  
  10 │ 
  11 │ let () = {
  12 │   open Foo exception End
  13 │   x()
  14 │ }
  
  consecutive expressions on a line must be separated by ';' or a newline
  
========================================================"
`;

exports[`emptyBlock.js 1`] = `
"=====Parsetree==========================================
let x = ((())[@ns.braces ])
let f a b = ((())[@ns.braces ])
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/emptyBlock.js 1:10  
  1 │ let x = {}
  2 │ 
  3 │ let f = (a, b) => {}
  
  This let-binding misses an expression
  
  Syntax error!
  parsing/errors/expressions/emptyBlock.js 3:20  
  1 │ let x = {}
  2 │ 
  3 │ let f = (a, b) => {}
  4 │ 
  
  Missing expression
  
========================================================"
`;

exports[`if.js 1`] = `
"=====Parsetree==========================================
;;if match then let a = 1 in a + 1
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/if.js 2:11-3:5  
  1 │ // missing brace below
  2 │ if (match)
  3 │   let a = 1
  4 │   a + 1
  5 │ }
  
  Did you forget a \`{\` here? 
  
========================================================"
`;

exports[`ifLet.res 1`] = `
"=====Parsetree==========================================
;;((match result with | Some x -> Js.log \\"The sky is blue\\" | _ -> ())
  [@ns.iflet ][@warning \\"-4\\"])
;;((match result with
    | Error x -> Js.log \\"The sky is red\\"
    | _ ->
        (((match result with | Ok y -> Js.log \\"The sky is blue\\" | _ -> ()))
        [@ns.iflet ][@warning \\"-4\\"]))[@ns.iflet ][@warning \\"-4\\"])
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/ifLet.res 1:1-3:1  
  1 │ if let Some(x) = result {
  2 │   Js.log(\\"The sky is blue\\")
  3 │ }
  4 │ 
  5 │ if let Error(x) = result {
  
  If-let is currently highly experimental. Use a regular \`switch\` with pattern matching instead:

switch result {
| Some(x) => Js.log(\\"The sky is blue\\")
| _ => ()
}

  
  Syntax error!
  parsing/errors/expressions/ifLet.res 7:8-11:1  
   5 │ if let Error(x) = result {
   6 │   Js.log(\\"The sky is red\\")
   7 │ } else if let Ok(y) = result {
   8 │   Js.log(\\"The sky is blue\\")
   9 │ } else {
  10 │   ()
  11 │ }
  12 │ 
  
  If-let is currently highly experimental. Use a regular \`switch\` with pattern matching instead:

switch result {
| Ok(y) => Js.log(\\"The sky is blue\\")
| _ => ()
}

  
========================================================"
`;

exports[`misc.js 1`] = `
"=====Parsetree==========================================
let x = ([%napkinscript.exprhole ]) + 1
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/misc.js 1:9  
  1 │ let x = _ + 1
  2 │ 
  
  \`_\` isn't a valid name.
  
========================================================"
`;

exports[`record.js 1`] = `
"=====Parsetree==========================================
let newWrapper = { updateF; value = (f xWrapper.currentValue) }
let newWrapper = { updateF; updateF2; value = (f xWrapper.currentValue) }
let record = { field = ([%napkinscript.exprhole ]) }
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/record.js 2:10-3:7  
  1 │ let newWrapper = {
  2 │   updateF
  3 │   value: f(xWrapper.currentValue),
  4 │ }
  5 │ 
  
  Did you forget a \`,\` here? 
  
  Syntax error!
  parsing/errors/expressions/record.js 8:10-18  
   6 │ 
   7 │ let newWrapper = {
   8 │   updateF updateF2
   9 │   value: f(xWrapper.currentValue),
  10 │ }
  
  Did you forget a \`:\` here? 
  
  Syntax error!
  parsing/errors/expressions/record.js 13:9-17:0  
  11 │ 
  12 │ let record = {
  13 │   field:
  14 │ }
  15 │ 
  16 │ 
  17 │ 
  
  Missing expression
  
========================================================"
`;

exports[`setField.js 1`] = `
"=====Parsetree==========================================
;;if match
  then
    let a = 1 in (m.left).compatibleTypeArgs <- ([%napkinscript.exprhole ])
  else sideEffect ()
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/setField.js 4:30-5:1  
  2 │   let a = 1
  3 │ 	// notice missing expression after = 
  4 │   m.left.compatibleTypeArgs =
  5 │ } else {
  6 │   sideEffect()
  7 │ }
  
  It seems that this record field mutation misses an expression
  
========================================================"
`;

exports[`taggedTemplateLiterals.js 1`] = `
"=====Parsetree==========================================
;;{js|null|js}
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/taggedTemplateLiterals.js 1:1-5  
  1 │ foo()\`null\`
  2 │ 
  
  Tagged template literals are currently restricted to identifiers like: json\`null\`.
  
========================================================"
`;

exports[`try.js 1`] = `
"=====Parsetree==========================================
let parsedPayload = try Js.Json.parseExn response with | _ -> Js.Json.null
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/try.js 2:37-38  
  1 ┆ let parsedPayload =
  2 ┆   try (Js.Json.parseExn(response)) {
  3 ┆   | _ => Js.Json.null
  4 ┆   }
  
  Did you forget a \`catch\` here? 
  
========================================================"
`;

exports[`unexpectedConstraint.js 1`] = `
"=====Parsetree==========================================
let x = ((let a = 1 in let b = 2 in (a + b : int))[@ns.braces ])
let x = (\\"hi\\" : string)
=====Errors=============================================

  Syntax error!
  parsing/errors/expressions/unexpectedConstraint.js 4:3-13  
  2 │   let a = 1
  3 │   let b = 2
  4 │   a + b : int
  5 │ }
  6 │ 
  
  Expressions with type constraints need to be wrapped in parens:
  (a + b: int)

  
  Syntax error!
  parsing/errors/expressions/unexpectedConstraint.js 7:9-20  
  5 │ }
  6 │ 
  7 │ let x = \\"hi\\": string 
  8 │ 
  
  Expressions with type constraints need to be wrapped in parens:
  (\\"hi\\": string)

  
========================================================"
`;
