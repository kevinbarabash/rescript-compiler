// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`missing.res 1`] = `
"=====Parsetree==========================================
let 2 = [%napkinscript.exprhole ]
let 4 = for [%napkinscript.patternhole ] = 0 to 10 do Js.log \\"for\\" done
;;match x with | () -> [%napkinscript.exprhole ]
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/pattern/missing.res\\", line 1, characters 4-5:


[31m1[0m â”‚  let [31m=[0m 2
2 â”‚  let = 4
3 â”‚  

I was expecting a name for this let-binding. Example: \`let message = \\"hello\\"\`


File \\"/syntax/tests/parsing/errors/pattern/missing.res\\", line 2, characters 4-5:


1 â”‚  let = 2
[31m2[0m â”‚  let [31m=[0m 4
3 â”‚  
4 â”‚  for in 0 to 10 {

I was expecting a name for this let-binding. Example: \`let message = \\"hello\\"\`


File \\"/syntax/tests/parsing/errors/pattern/missing.res\\", line 4, characters 4-6:


2 â”‚  let = 4
3 â”‚  
[31m4[0m â”‚  for [31min[0m 0 to 10 {
5 â”‚    Js.log(\\"for\\")
6 â”‚  }

A for-loop has the following form: \`for i in 0 to 10\`. Did you forget to supply a name before \`in\`?


File \\"/syntax/tests/parsing/errors/pattern/missing.res\\", line 9, characters 2-4:


7 â”‚  
8 â”‚  switch x {
[31m9[0m â”‚  | [31m=>[0m ()
10 â”‚  }

I was expecting a pattern to match on before the \`=>\`



========================================================"
`;
