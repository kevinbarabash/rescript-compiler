// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`closingBraces.res 1`] = `
"=====Parsetree==========================================
let x = 1
let y = 2
=====Errors=============================================

  Syntax error!
  parsing/errors/structure/closingBraces.res:3:1  
  1 │ let x = 1
  2 │ 
  3 │ }}}
  4 │ 
  5 │ let y = 2
  
  I'm not sure what to parse here when looking at \\"}\\".


========================================================"
`;

exports[`consecutive.res 1`] = `
"=====Parsetree==========================================
open Foo
exception Bar 
=====Errors=============================================

  Syntax error!
  parsing/errors/structure/consecutive.res:1:9-18  
  1 │ open Foo exception Bar
  2 │ 
  
  consecutive statements on a line must be separated by ';' or a newline


========================================================"
`;

exports[`gh16A.res 1`] = `
"=====Parsetree==========================================
module C = struct module T = (Fun)(struct ;;foo (a + c) (b + d) end) end
;;Js.log \\"test\\"
=====Errors=============================================

  Syntax error!
  parsing/errors/structure/gh16A.res:6:1  
  4 │   })
  5 │ }
  6 │ )
  7 │ Js.log(\\"test\\"); // Is omitted from the compiled JS
  8 │ 
  
  I'm not sure what to parse here when looking at \\")\\".


========================================================"
`;

exports[`gh16B.res 1`] = `
"=====Parsetree==========================================
open Ws
let wss = Server.make { port = 82 }
let address = wss |. Server.address
let log msg = Js.log ({js|> Server: |js} ^ msg)
;;log
    (((((({js|Running on: |js} ^ address.address) ^ {js|:|js}) ^
          (address.port |. string_of_int))
         ^ {js| (|js})
        ^ address.family)
       ^ {js|)|js})
module ClientSet =
  struct
    module T =
      (Belt.Id.MakeComparable)(struct
                                 type nonrec t = Client.t
                                 let cmp a b =
                                   ((compare (a |. Client.getUniqueId)
                                       (b |. Client.getUniqueId))
                                   [@ns.braces ])
                               end)
    let empty = Belt.Set.make ~id:(((module T))[@ns.namedArgLoc ])
  end
;;Js.log \\"test\\"
=====Errors=============================================

  Syntax error!
  parsing/errors/structure/gh16B.res:19:2  
  17 │ 
  18 │ 
  19 │ })))))))))))))))))))))))))))))); // this \\")\\" here, this can even be \\")
       )))))))))))))))\\" and should error
  20 │ 
  21 │ Js.log(\\"test\\") // should not be omitted
  
  I'm not sure what to parse here when looking at \\")\\".


========================================================"
`;

exports[`letBinding.js 1`] = `
"=====Parsetree==========================================
let rightResource =
  (ur.resources).find
    (fun r -> r.account_id == ((connection.left).account).id)
let x = ((let field = p |. parseFieldDeclaration in field)[@ns.braces ])
let t = ((let (_, _, token) = scanner |. scan in token)[@ns.braces ])
let (keyTable : int Belt.Map.String.t) = [%rescript.exprhole ]
let foo = [%rescript.exprhole ]
let (x : int) = string = y
let x = string = y
let (x : int1) = (int2 = 3 :> int3)
=====Errors=============================================

  Syntax error!
  parsing/errors/structure/letBinding.js:2:18-20  
  1 │ // missing =
  2 │ let rightResource ur.resources.find(
  3 │   r => r.account_id === connection.left.account.id
  4 │ )
  
  Did you forget a \`=\` here? 

  Syntax error!
  parsing/errors/structure/letBinding.js:8:12-13  
   6 │ let x = {
   7 │   // missing =
   8 │   let field p->parseFieldDeclaration 
   9 │   field
  10 │ }
  
  Did you forget a \`=\` here? 

  Syntax error!
  parsing/errors/structure/letBinding.js:14:19-26  
  12 │ let t = {
  13 │ 	// missing =
  14 │ 	let (_, _, token) scanner->scan
  15 │   token
  16 │ }
  
  Did you forget a \`=\` here? 

  Syntax error!
  parsing/errors/structure/letBinding.js:18:39-20:3  
  16 │ }
  17 │ 
  18 │ let keyTable: Belt.Map.String.t<int> =
  19 │ 
  20 │ let foo = 
  21 │ 
  22 │ // no magic in the syntax
  
  This let-binding misses an expression

  Syntax error!
  parsing/errors/structure/letBinding.js:20:10-23:3  
  18 │ let keyTable: Belt.Map.String.t<int> =
  19 │ 
  20 │ let foo = 
  21 │ 
  22 │ // no magic in the syntax
  23 │ let x: int :> string = y
  24 │ 
  25 │ // no magic in the syntax
  
  This let-binding misses an expression

  Syntax error!
  parsing/errors/structure/letBinding.js:23:11-13  
  21 │ 
  22 │ // no magic in the syntax
  23 │ let x: int :> string = y
  24 │ 
  25 │ // no magic in the syntax
  
  Did you forget a \`=\` here? 

  Syntax error!
  parsing/errors/structure/letBinding.js:26:6-8  
  24 │ 
  25 │ // no magic in the syntax
  26 │ let x :> string = y
  27 │ 
  28 │ // no magic in the syntax
  
  Did you forget a \`=\` here? 

  Syntax error!
  parsing/errors/structure/letBinding.js:29:13-15  
  27 │ 
  28 │ // no magic in the syntax
  29 │ let x : int1 :> int2 = 3 :> int3
  30 │ 
  
  Did you forget a \`=\` here? 


========================================================"
`;

exports[`letBindingPatternKeyword.js 1`] = `
"=====Parsetree==========================================
let [%rescript.patternhole ] = 1
let [%rescript.patternhole ] = 3
=====Errors=============================================

  Syntax error!
  parsing/errors/structure/letBindingPatternKeyword.js:1:5-8  
  1 │ let open = 1
  2 │ let to = 3
  3 │ 
  
  \`open\` is a reserved keyword. Keywords need to be escaped: \\\\\\"open\\"

  Syntax error!
  parsing/errors/structure/letBindingPatternKeyword.js:2:5-6  
  1 │ let open = 1
  2 │ let to = 3
  3 │ 
  
  \`to\` is a reserved keyword. Keywords need to be escaped: \\\\\\"to\\"


========================================================"
`;
