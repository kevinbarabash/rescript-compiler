// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`closingBraces.ns 1`] = `
"=====Parsetree==========================================
let x = 1
let y = 2
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/structure/closingBraces.ns\\", line 3, characters 0-1:


1 â”‚  let x = 1
2 â”‚  
[31m3[0m â”‚  [31m}[0m}}
4 â”‚  
5 â”‚  let y = 2

I'm not sure what to parse here when looking at \\"}\\".



========================================================"
`;

exports[`consecutive.ns 1`] = `
"=====Parsetree==========================================
open Foo
exception Bar 
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/structure/consecutive.ns\\", line 1, characters 8-18:


[31m1[0m â”‚  open Foo[31m exception[0m Bar

consecutive statements on a line must be separated by ';' or a newline



========================================================"
`;

exports[`gh16A.ns 1`] = `
"=====Parsetree==========================================
module C = struct module T = (Fun)(struct ;;foo (a + c) (b + d) end) end
;;Js.log \\"test\\"
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/structure/gh16A.ns\\", line 6, characters 0-1:


4 â”‚    })
5 â”‚  }
[31m6[0m â”‚  [31m)[0m
7 â”‚  Js.log(\\"test\\"); // Is omitted from the compiled JS

I'm not sure what to parse here when looking at \\")\\".



========================================================"
`;

exports[`gh16B.ns 1`] = `
"=====Parsetree==========================================
open Ws
let wss = Server.make { port = 82 }
let address = wss |. Server.address
let log msg = Js.log ({|> Server: |} ^ msg)
;;log
    (((((({|Running on: |} ^ address.address) ^ {|:|}) ^
          (address.port |. string_of_int))
         ^ {| (|})
        ^ address.family)
       ^ {|)|})
module ClientSet =
  struct
    module T =
      (Belt.Id.MakeComparable)(struct
                                 type nonrec t = Client.t
                                 let cmp a b =
                                   ((compare (a |. Client.getUniqueId)
                                       (b |. Client.getUniqueId))
                                   [@ns.braces ])
                               end)
    let empty = Belt.Set.make ~id:(((module T))[@ns.namedArgLoc ])
  end
;;Js.log \\"test\\"
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/structure/gh16B.ns\\", line 19, characters 1-2:


17 â”‚  
18 â”‚  
[31m19[0m â”‚  }[31m)[0m))))))))))))))))))))))))))))); // this \\")\\" here, this can even be \\"))))))))))))))))\\" and should error
20 â”‚  
21 â”‚  Js.log(\\"test\\") // should not be omitted

I'm not sure what to parse here when looking at \\")\\".



========================================================"
`;

exports[`letBinding.js 1`] = `
"=====Parsetree==========================================
let rightResource =
  (ur.resources).find
    (fun r -> r.account_id == ((connection.left).account).id)
let x = ((let field = p |. parseFieldDeclaration in field)[@ns.braces ])
let t = ((let (_, _, token) = scanner |. scan in token)[@ns.braces ])
let (keyTable : int Belt.Map.String.t) = [%napkinscript.exprhole ]
let foo = [%napkinscript.exprhole ]
let (x : int) = string = y
let x = string = y
let (x : int1) = (int2 = 3 :> int3)
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/structure/letBinding.js\\", line 2, characters 17-20:


1 â”‚  // missing =
[31m2[0m â”‚  let rightResource ur.resources.find(          
                       [31m^[0m
3 â”‚    r => r.account_id === connection.left.account.id
4 â”‚  )

Did you forget a \`=\` here? 


File \\"/syntax/tests/parsing/errors/structure/letBinding.js\\", line 8, characters 11-13:


6 â”‚  let x = {
7 â”‚    // missing =
[31m8[0m â”‚    let field p->parseFieldDeclaration           
                 [31m^[0m
9 â”‚    field
10 â”‚  }

Did you forget a \`=\` here? 


File \\"/syntax/tests/parsing/errors/structure/letBinding.js\\", line 14, characters 18-26:


12 â”‚  let t = {
13 â”‚  	// missing =
[31m14[0m â”‚  	let (_, _, token) scanner->scan          
                        [31m^[0m
15 â”‚    token
16 â”‚  }

Did you forget a \`=\` here? 


File \\"/syntax/tests/parsing/errors/structure/letBinding.js\\", line 18, characters 38-43:


16 â”‚  }
17 â”‚  
[31m18[0m â”‚  let keyTable: Belt.Map.String.t<int> =
19 â”‚  
20 â”‚  let foo = 

This let-binding misses an expression


File \\"/syntax/tests/parsing/errors/structure/letBinding.js\\", line 20, characters 9-41:


18 â”‚  let keyTable: Belt.Map.String.t<int> =
19 â”‚  
[31m20[0m â”‚  let foo =[31m[0m 
21 â”‚  
22 â”‚  // no magic in the syntax

This let-binding misses an expression


File \\"/syntax/tests/parsing/errors/structure/letBinding.js\\", line 23, characters 10-13:


21 â”‚  
22 â”‚  // no magic in the syntax
[31m23[0m â”‚  let x: int :> string = y          
                [31m^[0m
24 â”‚  
25 â”‚  // no magic in the syntax

Did you forget a \`=\` here? 


File \\"/syntax/tests/parsing/errors/structure/letBinding.js\\", line 26, characters 5-8:


24 â”‚  
25 â”‚  // no magic in the syntax
[31m26[0m â”‚  let x :> string = y          
           [31m^[0m
27 â”‚  
28 â”‚  // no magic in the syntax

Did you forget a \`=\` here? 


File \\"/syntax/tests/parsing/errors/structure/letBinding.js\\", line 29, characters 12-15:


27 â”‚  
28 â”‚  // no magic in the syntax
[31m29[0m â”‚  let x : int1 :> int2 = 3 :> int3          
                  [31m^[0m

Did you forget a \`=\` here? 



========================================================"
`;

exports[`letBindingPatternKeyword.js 1`] = `
"=====Parsetree==========================================
let [%napkinscript.patternhole ] = 1
let [%napkinscript.patternhole ] = 3
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/structure/letBindingPatternKeyword.js\\", line 1, characters 4-8:


[31m1[0m â”‚  let [31mopen[0m = 1
2 â”‚  let to = 3

\`open\` is a reserved keyword. Keywords need to be escaped: \\\\\\"open\\"


File \\"/syntax/tests/parsing/errors/structure/letBindingPatternKeyword.js\\", line 2, characters 4-6:


1 â”‚  let open = 1
[31m2[0m â”‚  let [31mto[0m = 3

\`to\` is a reserved keyword. Keywords need to be escaped: \\\\\\"to\\"



========================================================"
`;
