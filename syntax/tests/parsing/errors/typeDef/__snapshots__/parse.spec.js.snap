// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`emptyInlineRecord.res 1`] = `
"=====Parsetree==========================================
type nonrec 'a node =
  | Nil 
  | Node of {
  } 
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/typeDef/emptyInlineRecord.res\\", line 3, characters 9-11:


1 â”‚  type node<'a> =
2 â”‚    | Nil
[31m3[0m â”‚    | Node([31m{}[0m)

An inline record declaration needs at least one field



========================================================"
`;

exports[`emptyRecord.js 1`] = `
"=====Parsetree==========================================
type nonrec record = {
  }
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/typeDef/emptyRecord.js\\", line 1, characters 14-16:


[31m1[0m â”‚  type record = [31m{}[0m

A record needs at least one field



========================================================"
`;

exports[`namedParameters.js 1`] = `
"=====Parsetree==========================================
type nonrec draw = stroke:pencil -> unit
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/typeDef/namedParameters.js\\", line 1, characters 14-20:


[31m1[0m â”‚  type  draw = ([31mstroke[0m: pencil) => unit

Parameter names start with a \`~\`, like: ~stroke



========================================================"
`;

exports[`polyvariant.js 1`] = `
"=====Parsetree==========================================
type nonrec t = [< [%napkinscript.typehole ]]
type nonrec t = [ s | [%napkinscript.typehole ]]
type nonrec z = [< \`A  | \`B ]
type t = [ [%napkinscript.typehole ] | [%napkinscript.typehole ]]
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/typeDef/polyvariant.js\\", line 1, characters 13-19:


[31m1[0m â”‚  type t = [< ]
2 â”‚  
3 â”‚  type t = [ s ]

I'm not sure what to parse here when looking at \\"]\\".


File \\"/syntax/tests/parsing/errors/typeDef/polyvariant.js\\", line 3, characters 12-14:


1 â”‚  type t = [< ]
2 â”‚  
[31m3[0m â”‚  type t = [ s ]          
                  [31m^[0m
4 â”‚  
5 â”‚  type z = [< | #A | #B > ]

Did you forget a \`|\` here? 


File \\"/syntax/tests/parsing/errors/typeDef/polyvariant.js\\", line 7, characters 15-17:


5 â”‚  type z = [< | #A | #B > ]
6 â”‚  
[31m7[0m â”‚  type rec t = []
8 â”‚  

I'm not sure what to parse here when looking at \\"]\\".



========================================================"
`;

exports[`record.res 1`] = `
"=====Parsetree==========================================
type nonrec observation =
  {
  observed: int ;
  observer: [%napkinscript.typehole ] }
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/typeDef/record.res\\", line 4, characters 1-2:


2 â”‚    observed: int,
3 â”‚    observer:
[31m4[0m â”‚  }

I'm missing a type here



========================================================"
`;

exports[`typeDef.js 1`] = `
"=====Parsetree==========================================
type stack =
  | Empty 
type nonrec t = [%napkinscript.typehole ]
type nonrec state = [%napkinscript.typehole ]
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/typeDef/typeDef.js\\", line 1, characters 14-18:


[31m1[0m â”‚  type rec stack          
                    [31m^[0m
2 â”‚    | Empty
3 â”‚  

Did you forget a \`=\` here? 


File \\"/syntax/tests/parsing/errors/typeDef/typeDef.js\\", line 5, characters 8-30:


3 â”‚  
4 â”‚  // missing type
[31m5[0m â”‚  type t =
6 â”‚  
7 â”‚  // missing type

Missing a type here


File \\"/syntax/tests/parsing/errors/typeDef/typeDef.js\\", line 8, characters 12-13:


6 â”‚  
7 â”‚  // missing type
[31m8[0m â”‚  type state =

Missing a type here



========================================================"
`;

exports[`typeParams.js 1`] = `
"=====Parsetree==========================================
type nonrec 'a node = {
  _value: 'a Js.Nullable.value }
type nonrec ('from, '_) derivedNode =
  {
  mutable value: 'to_ ;
  updateF: 'from -> 'to_ }
=====Errors=============================================

File \\"/syntax/tests/parsing/errors/typeDef/typeParams.js\\", line 1, characters 9-13:


[31m1[0m â”‚  type node[31m('a)[0m = {
2 â”‚    _value: Js.Nullable.value<'a>
3 â”‚  }

Type parameters require angle brackets:
  node<'a>



File \\"/syntax/tests/parsing/errors/typeDef/typeParams.js\\", line 5, characters 25-27:


3 â”‚  }
4 â”‚  
[31m5[0m â”‚  type derivedNode<'from, '[31mto[0m> = {
6 â”‚    mutable value: 'to_,
7 â”‚    updateF: 'from => 'to_,

\`to\` is a reserved keyword. Keywords need to be escaped: \\\\\\"to\\"



========================================================"
`;
