// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`emptyInlineRecord.res 1`] = `
"=====Parsetree==========================================
type nonrec 'a node =
  | Nil 
  | Node of {
  } 
=====Errors=============================================

  Syntax error!
  parsing/errors/typeDef/emptyInlineRecord.res:3:10-11  
  1 │ type node<'a> =
  2 │   | Nil
  3 │   | Node({})
  4 │ 
  
  An inline record declaration needs at least one field


========================================================"
`;

exports[`emptyRecord.js 1`] = `
"=====Parsetree==========================================
type nonrec record = {
  }
=====Errors=============================================

  Syntax error!
  parsing/errors/typeDef/emptyRecord.js:1:15-16  
  1 │ type record = {}
  2 │ 
  
  A record needs at least one field


========================================================"
`;

exports[`inlineRecord.res 1`] = `
"=====Parsetree==========================================
type nonrec entity =
  | Director 
  | Student of {
  name: string ;
  reportCard: < passing: bool  ;score: int   >  } 
type nonrec user =
  {
  name: string ;
  address: < street: string  ;country: string   >  }
let make (props : < handleClick: Click.t -> unit  ;value: string   > ) =
  render props
=====Errors=============================================

  Syntax error!
  parsing/errors/typeDef/inlineRecord.res:6:9-15  
  4 ┆ name: string,
  5 ┆ reportCard: {
  6 ┆   passing: bool,
  7 ┆   score: int
  8 ┆ }
  
  An inline record type declaration is only allowed in a variant constructor's declaration


  Syntax error!
  parsing/errors/typeDef/inlineRecord.res:14:5-10  
  12 ┆ name: string,
  13 ┆ address: {
  14 ┆   street: string,
  15 ┆   country: string,
  16 ┆ }
  
  An inline record type declaration is only allowed in a variant constructor's declaration


  Syntax error!
  parsing/errors/typeDef/inlineRecord.res:19:21-31  
  17 │ }
  18 │ 
  19 │ let make = (props: {handleClick: Click.t => unit, value: string}) => r
       ender(props)
  20 │ 
  
  An inline record type declaration is only allowed in a variant constructor's declaration


========================================================"
`;

exports[`namedParameters.js 1`] = `
"=====Parsetree==========================================
type nonrec draw = stroke:pencil -> unit
=====Errors=============================================

  Syntax error!
  parsing/errors/typeDef/namedParameters.js:1:15-20  
  1 │ type  draw = (stroke: pencil) => unit
  2 │ 
  
  A labeled parameter starts with a \`~\`. Did you mean: \`~stroke\`?


========================================================"
`;

exports[`polyvariant.js 1`] = `
"=====Parsetree==========================================
type nonrec t = [< [%rescript.typehole ]]
type nonrec z = [< \`A  | \`B ]
type t = [ [%rescript.typehole ] | [%rescript.typehole ]]
=====Errors=============================================

  Syntax error!
  parsing/errors/typeDef/polyvariant.js:1:13  
  1 │ type t = [< ]
  2 │ 
  3 │ type z = [< | #A | #B > ]
  
  I'm not sure what to parse here when looking at \\"]\\".


  Syntax error!
  parsing/errors/typeDef/polyvariant.js:5:15  
  3 │ type z = [< | #A | #B > ]
  4 │ 
  5 │ type rec t = []
  6 │ 
  7 │ 
  
  I'm not sure what to parse here when looking at \\"]\\".


========================================================"
`;

exports[`record.res 1`] = `
"=====Parsetree==========================================
type nonrec observation = {
  observed: int ;
  observer: [%rescript.typehole ] }
=====Errors=============================================

  Syntax error!
  parsing/errors/typeDef/record.res:4:1  
  2 │   observed: int,
  3 │   observer:
  4 │ }
  5 │ 
  
  I'm missing a type here


========================================================"
`;

exports[`typeDef.js 1`] = `
"=====Parsetree==========================================
type stack =
  | Empty 
type nonrec bar = string
type nonrec t = [%rescript.typehole ]
type nonrec state = [%rescript.typehole ]
=====Errors=============================================

  Syntax error!
  parsing/errors/typeDef/typeDef.js:1:15-2:3  
  1 │ type rec stack
  2 │   | Empty
  3 │ 
  4 │ // name cannot contain module access paths
  
  Did you forget a \`=\` here?


  Syntax error!
  parsing/errors/typeDef/typeDef.js:5:6-12  
  3 │ 
  4 │ // name cannot contain module access paths
  5 │ type Foo.bar = string
  6 │ 
  7 │ // missing type
  
  A type declaration's name cannot contain a module access. Did you mean \`bar\`?


  Syntax error!
  parsing/errors/typeDef/typeDef.js:11:1-4  
   9 │ 
  10 │ // missing type
  11 │ type state =
  12 │ 
  
  Missing a type here


  Syntax error!
  parsing/errors/typeDef/typeDef.js:12:1  
  10 │ // missing type
  11 │ type state =
  12 │ 
  
  Missing a type here


========================================================"
`;

exports[`typeParams.js 1`] = `
"=====Parsetree==========================================
type nonrec 'a node = {
  _value: 'a Js.Nullable.value }
type nonrec ('from, 'to) derivedNode =
  {
  mutable value: 'to_ ;
  updateF: 'from -> 'to_ }
type nonrec ('from, ') derivedNode =
  {
  mutable value: 'to_ ;
  updateF: 'from -> 'to_ }
type nonrec ('from, ') derivedNode =
  {
  mutable value: 'to_ ;
  updateF: 'from -> 'to_ }
type nonrec ('from, 'foo) derivedNode =
  {
  mutable value: 'to_ ;
  updateF: 'from -> 'to_ }
=====Errors=============================================

  Syntax error!
  parsing/errors/typeDef/typeParams.js:1:10-13  
  1 │ type node('a) = {
  2 │   _value: Js.Nullable.value<'a>
  3 │ }
  
  Type parameters require angle brackets:
  node<'a>


  Syntax error!
  parsing/errors/typeDef/typeParams.js:5:26-27  
  3 │ }
  4 │ 
  5 │ type derivedNode<'from, 'to> = {
  6 │   mutable value: 'to_,
  7 │   updateF: 'from => 'to_,
  
  \`to\` is a reserved keyword. Keywords need to be escaped: \\\\\\"to\\"


  Syntax error!
  parsing/errors/typeDef/typeParams.js:10:26  
   8 │ }
   9 │ 
  10 │ type derivedNode<'from, '+> = {
  11 │   mutable value: 'to_,
  12 │   updateF: 'from => 'to_,
  
  A type param consists of a singlequote followed by a name like \`'a\` or \`'A\`


  Syntax error!
  parsing/errors/typeDef/typeParams.js:15:26  
  13 │ }
  14 │ 
  15 │ type derivedNode<'from, '_> = {
  16 │   mutable value: 'to_,
  17 │   updateF: 'from => 'to_,
  
  A type param consists of a singlequote followed by a name like \`'a\` or \`'A\`


  Syntax error!
  parsing/errors/typeDef/typeParams.js:21:25-27  
  19 │ 
  20 │ 
  21 │ type derivedNode<'from, foo> = {
  22 │   mutable value: 'to_,
  23 │   updateF: 'from => 'to_,
  
  Type params start with a singlequote: 'foo


========================================================"
`;
