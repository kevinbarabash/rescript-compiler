// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`patternMatching.js 1`] = `
"=====Parsetree==========================================
;;match expr with
=====Errors=============================================

  Syntax error!
  /Users/mvalcke/Development/syntax/tests/parsing/errors/other/patternMatching.js:1:14-2:1
  
  1 │ switch expr {
  2 │ }
  3 │ 
  
  Pattern matching needs at least one case


========================================================"
`;

exports[`regionMissingComma.res 1`] = `
"=====Parsetree==========================================
external make :
  ?style:ReactDOMRe.Style.t -> ((?image:bool -> React.element)[@bs ]) =
    \\"ModalContent\\"
type nonrec 'extraInfo student =
  {
  name: string ;
  age: int ;
  otherInfo: 'extraInfo }
=====Errors=============================================

  Syntax error!
  /Users/mvalcke/Development/syntax/tests/parsing/errors/other/regionMissingComma.res:2:31
  
  1 │ external make: (
  2 │   ~style: ReactDOMRe.Style.t=?.
  3 │   ~image: bool=?,
  4 │ ) => React.element = \\"ModalContent\\"
  
  Did you forget a \`,\` here? 

  Syntax error!
  /Users/mvalcke/Development/syntax/tests/parsing/errors/other/regionMissingComma.res:8:11-9:11
  
   6 │ type student<'extraInfo> = {
   7 │   name: string,
   8 │   age: int
   9 │   otherInfo: 'extraInfo
  10 │ }
  11 │ 
  
  Did you forget a \`,\` here? 


========================================================"
`;

exports[`spread.js 1`] = `
"=====Parsetree==========================================
let arr = [|x;y|]
let [|arr;_|] = [|1;2;3|]
let record = { x with y }
let { x; y } = myRecord
let myList = x :: y
let x::y = myList
=====Errors=============================================

  Syntax error!
  /Users/mvalcke/Development/syntax/tests/parsing/errors/other/spread.js:1:12-14
  
  1 │ let arr = [...x, ...y]
  2 │ let [...arr, _] = [1, 2, 3]
  3 │ 
  
  Arrays can't use the \`...\` spread currently. Please use \`concat\` or other Array helpers.

  Syntax error!
  /Users/mvalcke/Development/syntax/tests/parsing/errors/other/spread.js:2:6-8
  
  1 │ let arr = [...x, ...y]
  2 │ let [...arr, _] = [1, 2, 3]
  3 │ 
  4 │ let record = {...x, ...y}
  
  Array's \`...\` spread is not supported in pattern matches.
Explanation: such spread would create a subarray; out of performance concern, our pattern matching currently guarantees to never create new intermediate data.
Solution: if it's to validate the first few elements, use a \`when\` clause + Array size check + \`get\` checks on the current pattern. If it's to obtain a subarray, use \`Array.sub\` or \`Belt.Array.slice\`.

  Syntax error!
  /Users/mvalcke/Development/syntax/tests/parsing/errors/other/spread.js:4:21-23
  
  2 │ let [...arr, _] = [1, 2, 3]
  3 │ 
  4 │ let record = {...x, ...y}
  5 │ let {...x, ...y} = myRecord
  6 │ 
  
  Records can only have one \`...\` spread, at the beginning.
Explanation: since records have a known, fixed shape, a spread like \`{a, ...b}\` wouldn't make sense, as \`b\` would override every field of \`a\` anyway.

  Syntax error!
  /Users/mvalcke/Development/syntax/tests/parsing/errors/other/spread.js:5:15-18
  
  3 │ 
  4 │ let record = {...x, ...y}
  5 │ let {...x, ...y} = myRecord
  6 │ 
  7 │ let myList = list{...x, ...y}
  
  Record's \`...\` spread is not supported in pattern matches.
Explanation: you can't collect a subset of a record's field into its own record, since a record needs an explicit declaration and that subset wouldn't have one.
Solution: you need to pull out each field you want explicitly.

  Syntax error!
  /Users/mvalcke/Development/syntax/tests/parsing/errors/other/spread.js:8:13-22
  
  6 │ 
  7 │ let myList = list{...x, ...y}
  8 │ let list{...x, ...y} = myList
  9 │ 
  
  List pattern matches only supports one \`...\` spread, at the end.
Explanation: a list spread at the tail is efficient, but a spread in the middle would create new list[s]; out of performance concern, our pattern matching currently guarantees to never create new intermediate data.


========================================================"
`;
