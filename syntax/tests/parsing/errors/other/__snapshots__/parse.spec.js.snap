// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`breadcrumbs170.res 1`] = `
"=====Parsetree==========================================
let l = (Some [1; 2; 3]) |> Obj.magic
module M = struct ;;match l with | None -> [] | Some l -> l ## prop end
;;from
;;now
;;on
;;all
;;syntax
;;is
;;\\"valid\\"
;;it
;;compiles
;;will
;;be
;;ignored
;;js / removed
;;on
;;format
=====Errors=============================================

  Syntax error!
  parsing/errors/other/breadcrumbs170.res:9:1
   7 │   }
   8 │ }
   9 │ }from now on all syntax is \\"valid\\", 
  10 │ it compiles and will be ignored in js/ removed on format
  11 │ 

  I'm not sure what to parse here when looking at \\"}\\".


========================================================"
`;

exports[`labelledParameters.res 1`] = `
"=====Parsetree==========================================
let f x ?(y= 2)  z = (x + y) + z
type nonrec f = x:int -> y:int -> int
=====Errors=============================================

  Syntax error!
  parsing/errors/other/labelledParameters.res:1:13-14
  1 │ let f = (x, y=2, z) => x + y + z
  2 │ 
  3 │ type f = (x: int, y: int) => int

  A labeled parameter starts with a \`~\`. Did you mean: \`~y\`?


  Syntax error!
  parsing/errors/other/labelledParameters.res:3:11
  1 │ let f = (x, y=2, z) => x + y + z
  2 │ 
  3 │ type f = (x: int, y: int) => int
  4 │ 

  A labeled parameter starts with a \`~\`. Did you mean: \`~x\`?


========================================================"
`;

exports[`oneElementTuple.res 1`] = `
"=====Parsetree==========================================
let faultyTuple = (a)
;;match faultyTuple with | (a) -> () | _ -> ()
type nonrec faultyTuple = (string)
=====Errors=============================================

  Syntax error!
  parsing/errors/other/oneElementTuple.res:1:19-23
  1 │ let faultyTuple = (a, )
  2 │ 
  3 │ switch faultyTuple {

  A tuple needs at least two elements


  Syntax error!
  parsing/errors/other/oneElementTuple.res:4:3-7
  2 │ 
  3 │ switch faultyTuple {
  4 │ | (a, ) => ()
  5 │ | _ => ()
  6 │ }

  A tuple needs at least two elements


  Syntax error!
  parsing/errors/other/oneElementTuple.res:8:20-29
  6 │ }
  7 │ 
  8 │ type faultyTuple = (string, )
  9 │ 

  A tuple needs at least two elements


========================================================"
`;

exports[`patternMatching.res 1`] = `
"=====Parsetree==========================================
;;match expr with
=====Errors=============================================

  Syntax error!
  parsing/errors/other/patternMatching.res:1:14-2:1
  1 │ switch expr {
  2 │ }
  3 │ 

  Pattern matching needs at least one case


========================================================"
`;

exports[`regionMissingComma.res 1`] = `
"=====Parsetree==========================================
external make :
  ?style:((ReactDOMRe.Style.t)[@ns.namedArgLoc ]) ->
    ((?image:((bool)[@ns.namedArgLoc ]) -> React.element)[@bs ]) =
    \\"ModalContent\\"
type nonrec 'extraInfo student =
  {
  name: string ;
  age: int ;
  otherInfo: 'extraInfo }
=====Errors=============================================

  Syntax error!
  parsing/errors/other/regionMissingComma.res:2:31
  1 │ external make: (
  2 │   ~style: ReactDOMRe.Style.t=?.
  3 │   ~image: bool=?,
  4 │ ) => React.element = \\"ModalContent\\"

  Did you forget a \`,\` here?


  Syntax error!
  parsing/errors/other/regionMissingComma.res:8:11-9:11
   6 │ type student<'extraInfo> = {
   7 │   name: string,
   8 │   age: int
   9 │   otherInfo: 'extraInfo
  10 │ }
  11 │ 

  Did you forget a \`,\` here?


========================================================"
`;

exports[`spread.res 1`] = `
"=====Parsetree==========================================
let arr = [|x;y|]
let [|arr;_|] = [|1;2;3|]
let record = { x with y }
let { x; y } = myRecord
let myList = x :: y
let x::y = myList
type nonrec t = < a  > 
type nonrec t =
  | Foo of < a  >  
type nonrec t = (foo, < x  > ) option
=====Errors=============================================

  Syntax error!
  parsing/errors/other/spread.res:1:12-14
  1 │ let arr = [...x, ...y]
  2 │ let [...arr, _] = [1, 2, 3]
  3 │ 

  Arrays can't use the \`...\` spread currently. Please use \`concat\` or other Array helpers.


  Syntax error!
  parsing/errors/other/spread.res:2:6-8
  1 │ let arr = [...x, ...y]
  2 │ let [...arr, _] = [1, 2, 3]
  3 │ 
  4 │ let record = {...x, ...y}

  Array's \`...\` spread is not supported in pattern matches.
Explanation: such spread would create a subarray; out of performance concern, our pattern matching currently guarantees to never create new intermediate data.
Solution: if it's to validate the first few elements, use a \`when\` clause + Array size check + \`get\` checks on the current pattern. If it's to obtain a subarray, use \`Array.sub\` or \`Belt.Array.slice\`.


  Syntax error!
  parsing/errors/other/spread.res:4:21-23
  2 │ let [...arr, _] = [1, 2, 3]
  3 │ 
  4 │ let record = {...x, ...y}
  5 │ let {...x, ...y} = myRecord
  6 │ 

  Records can only have one \`...\` spread, at the beginning.
Explanation: since records have a known, fixed shape, a spread like \`{a, ...b}\` wouldn't make sense, as \`b\` would override every field of \`a\` anyway.


  Syntax error!
  parsing/errors/other/spread.res:5:15-18
  3 │ 
  4 │ let record = {...x, ...y}
  5 │ let {...x, ...y} = myRecord
  6 │ 
  7 │ let myList = list{...x, ...y}

  Record's \`...\` spread is not supported in pattern matches.
Explanation: you can't collect a subset of a record's field into its own record, since a record needs an explicit declaration and that subset wouldn't have one.
Solution: you need to pull out each field you want explicitly.


  Syntax error!
  parsing/errors/other/spread.res:8:13-22
   6 │ 
   7 │ let myList = list{...x, ...y}
   8 │ let list{...x, ...y} = myList
   9 │ 
  10 │ type t = {...a}

  List pattern matches only supports one \`...\` spread, at the end.
Explanation: a list spread at the tail is efficient, but a spread in the middle would create new list[s]; out of performance concern, our pattern matching currently guarantees to never create new intermediate data.


  Syntax error!
  parsing/errors/other/spread.res:10:11-13
   8 │ let list{...x, ...y} = myList
   9 │ 
  10 │ type t = {...a}
  11 │ type t = Foo({...a})
  12 │ type t = option<foo, {...x}>

  You're using a ... spread without extra fields. This is the same type.


  Syntax error!
  parsing/errors/other/spread.res:11:15-17
   9 │ 
  10 │ type t = {...a}
  11 │ type t = Foo({...a})
  12 │ type t = option<foo, {...x}>
  13 │ 

  You're using a ... spread without extra fields. This is the same type.


  Syntax error!
  parsing/errors/other/spread.res:12:23-26
  10 │ type t = {...a}
  11 │ type t = Foo({...a})
  12 │ type t = option<foo, {...x}>
  13 │ 

  You're using a ... spread without extra fields. This is the same type.


========================================================"
`;
